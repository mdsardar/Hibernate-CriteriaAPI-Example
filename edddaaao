/*******************************************************************************
 *ALL RIGHTS RESERVED.  Not for disclosure outside of Citigroup 
 *and/or its subsidiaries without express prior written authorization.  
  @ Title : EddDaoImpl.java
  @ Author    : jr57611
  @ Created On  : Sep 6, 2017
  @ Description : Class for Edd DAO
******************************************************************************/

package com.citigroup.amlcdd.forms.edd.dao;

import java.math.BigDecimal;
import java.sql.Clob;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.hibernate.Criteria;
import org.hibernate.Hibernate;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.ProjectionList;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import com.citigroup.amlcdd.common.constants.AMLCDDConstants;
import com.citigroup.amlcdd.entity.EddDetailsEntity;
import com.citigroup.amlcdd.entity.EddDetailsMerchantEntity;
import com.citigroup.amlcdd.entity.EddMemberEntity;
import com.citigroup.amlcdd.entity.KYCCustomerDetailsEntity;
import com.citigroup.amlcdd.entity.KycAttachmentEntity;
import com.citigroup.amlcdd.entity.KycCustomerDetailsIdentEntity;
import com.citigroup.amlcdd.entity.KycEddEntity;
import com.citigroup.amlcdd.entity.KycEddMapEntity;
import com.citigroup.amlcdd.entity.KycMemberIdentificationEntity;
import com.citigroup.amlcdd.entity.KycMemberUBODetailsEntity;
import com.citigroup.amlcdd.entity.KycMemberUBOMapEntity;
import com.citigroup.amlcdd.entity.KycSourceOfWealthEntity;
import com.citigroup.amlcdd.forms.cdd.vo.CddBaseVO;
import com.citigroup.amlcdd.forms.edd.vo.EddMemberVO;
import com.citigroup.amlcdd.forms.edd.vo.EddVO;
import com.citigroup.amlcdd.forms.edd.vo.KycEddDetailsVO;
import com.citigroup.amlcdd.forms.edd.vo.KycEddMapDtlsVO;
import com.citigroup.amlcdd.forms.entity.MemberSpfAddendumEntity;
import com.citigroup.amlcdd.framework.dao.CDDBaseDaoImpl;
import com.citigroup.amlcdd.framework.util.CommonUtility;

@Repository
public class EddDaoImpl extends CDDBaseDaoImpl<EddDaoImpl> implements IEddDao {

	private final Logger logger = LoggerFactory.getLogger(EddDaoImpl.class);
	private static final String EDD_MEMBER_QUERY = "SELECT MEMBER.CUST_FIRST_NM, MEMBER.CUST_MIDDLE_NM, MEMBER.CUST_LAST_NM,"  
			+ " ADDR.ADDR_LINE1,ADDR.ADDR_LINE2,ADDR.ADDR_LINE3,ADDR.ADDR_LINE4, ADDR.CNTRY,ADDR.CITY,ADDR.STATE,ADDR.POSTAL_CODE," 
			+ "IDENT.ID_NBR, IDENT.ID_CNTRY,IDENT.ID_TYPE,IDENT.PHOTO_ID_TYPE,(SELECT LISTAGG(NVL(CODE_SHRT_DESC,MEMBER_ROLE),',') WITHIN GROUP (ORDER BY NVL(CODE_SHRT_DESC,MEMBER_ROLE)) "
			+ "FROM KYC_MEMBER_CUST_ROLE_MAP R_MAP LEFT OUTER JOIN DRI_RM_CDVT_FULL CDVT ON R_MAP.MEMBER_ROLE = CDVT.CODE_EXT_VALU AND CODE_INDX='00114' WHERE R_MAP.MEMBER_ID  = MEMBER.MEMBER_ID AND R_MAP.CONTROL_NBR = MEMBER.CONTROL_NBR "
			+ "AND (R_MAP.RECORD_STATUS IS NULL OR R_MAP.RECORD_STATUS   != 'INACTIVE')) MTYPE,MEMBER.DOB,MEMBER.MEMBER_ID ,(SELECT LISTAGG(REL_TYPE,',') WITHIN GROUP (ORDER BY REL_TYPE) FROM KYC_MEMBER_CUST_ROLE_MAP WHERE MEMBER_ID=MEMBER.MEMBER_ID AND CONTROL_NBR=MEMBER.CONTROL_NBR),"
            + " MEMBER.ID_TYPE_CDD, MEMBER.PHOTO_ID_TYPE_CDD, MEMBER.CUSTOMER_NAME, SEL_IDENT.ID_NBR  AS selIDNum,"
            + " SEL_IDENT.ID_CNTRY AS selIDCOUNTRY, CUST.NATIONALITY,MEMBER.MEMBER_CUSTOMER_NBR, CASE WHEN (SELECT LISTAGG(REL_TYPE,',') WITHIN GROUP (ORDER BY REL_TYPE) FROM KYC_MEMBER_CUST_ROLE_MAP WHERE MEMBER_ID=MEMBER.MEMBER_ID AND CONTROL_NBR=MEMBER.CONTROL_NBR)='CLIENT' THEN 1 ELSE 0 END AS MYTYPE_PRIR"
            + " FROM KYC_MEMBER_DETAILS MEMBER "
            + " FULL OUTER JOIN CUSTOMER_DETAILS CUST ON MEMBER.MEMBER_CUSTOMER_NBR = CUST.CUSTOMER_NBR "
			+ "  FULL OUTER JOIN KYC_MEMBER_ADDRESS ADDR ON MEMBER.MEMBER_ID = ADDR.MEMBER_ID AND MEMBER.CONTROL_NBR = ADDR.CONTROL_NBR AND ADDR.ADDR_TYPE= :addressType AND (MEMBER.MEMBER_TYPE <> \'INTERNAL\' OR MEMBER.MEMBER_TYPE IS NULL) " 
			+ "	FULL OUTER JOIN (SELECT CONTROL_NBR, MEMBER_ID, ID_NBR, ID_CNTRY, ID_TYPE, PHOTO_ID_TYPE FROM  KYC_MEMBER_IDENTIFICATION "
            + "     WHERE CONTROL_NBR = :controlNumber AND PRIMARY_INDICATOR = 'P'  AND MEMBER_CNTRY_CODE =:countryCode "
            + "      AND (RECORD_STATUS IS NULL OR RECORD_STATUS != 'INACTIVE'))"
            + " IDENT ON MEMBER.MEMBER_ID  = IDENT.MEMBER_ID "
            + " AND MEMBER.CONTROL_NBR = IDENT.CONTROL_NBR "
            + " FULL OUTER JOIN (SELECT CONTROL_NBR, MEMBER_ID, ID_NBR, ID_TYPE, ID_CNTRY FROM  KYC_MEMBER_IDENTIFICATION " 
            + "     WHERE CONTROL_NBR = :controlNumber AND MEMBER_CNTRY_CODE = :countryCode "
            + "  AND (RECORD_STATUS IS NULL OR RECORD_STATUS != 'INACTIVE')) "
            + "  SEL_IDENT ON MEMBER.MEMBER_ID  = SEL_IDENT.MEMBER_ID "
            + " AND MEMBER.CONTROL_NBR = SEL_IDENT.CONTROL_NBR " 
            + " AND SEL_IDENT.ID_TYPE = MEMBER.ID_TYPE_CDD "
			+ "	WHERE MEMBER.CNTRY_CDE = :countryCode AND MEMBER.CONTROL_NBR =:controlNumber AND MEMBER.CUSTOMER_NBR =:customerNumber "
            + " AND (MEMBER.RECORD_STATUS IS NULL OR MEMBER.RECORD_STATUS != 'INACTIVE') AND (MEMBER.MEMBER_TYPE NOT IN ('INTERNAL', 'SELF', 'CLIENT') OR MEMBER.MEMBER_TYPE IS NULL)"
            + " ORDER BY MYTYPE_PRIR DESC,MEMBER_ID";
	
	private static final String EDD_MEMBER_FOR_CARDS_IND_QUERY = "SELECT MEMBER.CUST_FIRST_NM, MEMBER.CUST_MIDDLE_NM, MEMBER.CUST_LAST_NM,"  
			+ " ADDR.ADDR_LINE1,ADDR.ADDR_LINE2,ADDR.ADDR_LINE3,ADDR.ADDR_LINE4, ADDR.CNTRY,ADDR.CITY,ADDR.STATE,ADDR.POSTAL_CODE," 
			+ "IDENT.ID_NBR,"
			+ "IDENT.ID_CNTRY,IDENT.ID_TYPE,IDENT.PHOTO_ID_TYPE,(SELECT LISTAGG(MEMBER_ROLE,',') WITHIN GROUP (ORDER BY MEMBER_ROLE) FROM KYC_MEMBER_CUST_ROLE_MAP WHERE MEMBER_ID=MEMBER.MEMBER_ID AND CONTROL_NBR=MEMBER.CONTROL_NBR),MEMBER.DOB,ROLE.MEMBER_ID , ROLE.REL_TYPE ,"
            + " MEMBER.ID_TYPE_CDD, MEMBER.PHOTO_ID_TYPE_CDD, MEMBER.CUSTOMER_NAME, SEL_IDENT.ID_NBR  AS selIDNum,"
            + " SEL_IDENT.ID_CNTRY AS selIDCOUNTRY, CUST.NATIONALITY,MEMBER.MEMBER_CUSTOMER_NBR, ROLE.MEMBER_ROLE,"
            + " CASE WHEN (SELECT LISTAGG(MEMBER_ROLE,',') WITHIN GROUP (ORDER BY MEMBER_ROLE) FROM KYC_MEMBER_CUST_ROLE_MAP WHERE MEMBER_ID=MEMBER.MEMBER_ID AND CONTROL_NBR=MEMBER.CONTROL_NBR)='CLIENT' THEN 1 ELSE 0 END AS MYTYPE_PRIR"
            + " FROM KYC_MEMBER_DETAILS MEMBER "
            + " FULL OUTER JOIN KYC_CUSTOMER_DETAILS CUST ON MEMBER.MEMBER_CUSTOMER_NBR = CUST.CUSTOMER_NBR and MEMBER.CONTROL_NBR = CUST.CONTROL_NBR"
			+ "  FULL OUTER JOIN KYC_MEMBER_ADDRESS ADDR ON MEMBER.MEMBER_ID = ADDR.MEMBER_ID AND MEMBER.CONTROL_NBR = ADDR.CONTROL_NBR AND ADDR.ADDR_TYPE= :addressType AND (MEMBER.MEMBER_TYPE <> \'INTERNAL\' OR MEMBER.MEMBER_TYPE IS NULL) " 
			+ "	FULL OUTER JOIN (SELECT CONTROL_NBR, MEMBER_ID, ID_NBR, ID_CNTRY, ID_TYPE, PHOTO_ID_TYPE FROM  KYC_MEMBER_IDENTIFICATION "
            + "     WHERE CONTROL_NBR = :controlNumber AND PRIMARY_INDICATOR = 'P'  AND MEMBER_CNTRY_CODE =:countryCode "
            + "      AND (RECORD_STATUS IS NULL OR RECORD_STATUS != 'INACTIVE'))"
            + " IDENT ON MEMBER.MEMBER_ID  = IDENT.MEMBER_ID "
            + " AND MEMBER.CONTROL_NBR = IDENT.CONTROL_NBR "
            + " FULL OUTER JOIN (SELECT CONTROL_NBR, MEMBER_ID, ID_NBR, ID_TYPE, ID_CNTRY FROM  KYC_MEMBER_IDENTIFICATION " 
            + "     WHERE CONTROL_NBR = :controlNumber AND MEMBER_CNTRY_CODE = :countryCode "
            + "  AND (RECORD_STATUS IS NULL OR RECORD_STATUS != 'INACTIVE')) "
            + "  SEL_IDENT ON MEMBER.MEMBER_ID  = SEL_IDENT.MEMBER_ID "
            + " AND MEMBER.CONTROL_NBR = SEL_IDENT.CONTROL_NBR " 
            + " AND SEL_IDENT.ID_TYPE = MEMBER.ID_TYPE_CDD "
			+ " FULL OUTER JOIN KYC_MEMBER_CUST_ROLE_MAP ROLE ON MEMBER.MEMBER_ID = ROLE.MEMBER_ID AND MEMBER.CONTROL_NBR = ROLE.CONTROL_NBR " 
			+ "	WHERE MEMBER.CNTRY_CDE = :countryCode AND MEMBER.CONTROL_NBR =:controlNumber AND MEMBER.CUSTOMER_NBR =:customerNumber "
            + " AND (MEMBER.RECORD_STATUS IS NULL OR MEMBER.RECORD_STATUS != 'INACTIVE') AND ROLE.MEMBER_ROLE='SUPPLEMENTARY' AND (ROLE.RECORD_STATUS IS NULL OR ROLE.RECORD_STATUS != 'INACTIVE')"
            + " ORDER BY MYTYPE_PRIR DESC,MEMBER_ID";

	private static final String EDD_DETAILS_QUERY = "SELECT KYCCUST.TYPE_OF_EMPLOYMENT,KYCCUST.OTHER_TYPE_OF_EMPLOYMENT,KYCCUST.IS_CLIENT_CURRENTLY_EMPLOYED,KYCCUST.EMPLOYER_NAME,"
			+ " ADDR.ADDR_LINE1,ADDR.ADDR_LINE2,ADDR.ADDR_LINE3,ADDR.ADDR_LINE4,ADDR.CITY,ADDR.STATE,ADDR.CNTRY,ADDR.POSTAL_CODE,"
			+ " KYCCUST.EMPLOYER_PHONE,KYCCUST.BUSINESS_WEBSITE,KYCCUST.BUS_EMPLOYER_EMAIL,KYCCUST.BUS_EMPLOYER_FAX,KYCCUST.CUST_SICCODE,KYCCUST.GEO_LOCATIONS,"
			+ " EDD.CLIENT_SUBST_DISCRP,EDD.CLIENT_SUBST_DISCRP_DTLS,KYCCUST.LENGTH_OF_RELN,EDD.IS_CLIENT_INVL_GAM, EDD.CLIENT_MJR_INVEST_CTRY, EDD.NET_WORTH_CCY,"
			+ " EDD.NET_WORTH_AMT, EDD.NET_ASSETS,EDD.ASSET_CCY,EDD.NET_LIABILITY,EDD.LIABILITY_CCY,KYCCUST.ACCOUNT_EMBASSY_FLAG,"
			+ " EDD.CORRB_WEALTH_PERCENT,EDD.CORRB_WEALTH_DOC_TYPE,EDD.CORRB_WEALTH_DOCS,dbms_lob.substr(EDD.SRC_CORRB_WEALTH),KYCCUST.TOT_REL_BAL_BCY,KYCCUST.IS_CLIENT_SPF,KYCCUST.CUST_FIRST_NM,KYCCUST.CUST_LAST_NM,EDD.CREATED_BY,EDD.CREATED_DT,EDD.VER_NUM,"
			+ " DOC.ATCH_ID, DOC.ATCH_NM"//// converted clob to varchar2 . SRC_CORRB_WEALTH ---TO----> dbms_lob.substr(SRC_CORRB_WEALTH)
			+ " FROM KYC_CUSTOMER_DETAILS KYCCUST FULL OUTER JOIN KYC_CUSTOMER_ADDRESS ADDR ON KYCCUST.CONTROL_NBR = ADDR.CONTROL_NBR AND ADDR.ADDR_TYPE ='EMP' AND (ADDR.RECORD_STATUS IS NULL OR ADDR.RECORD_STATUS !='INACTIVE') FULL OUTER JOIN KYC_EDD EDD ON KYCCUST.CONTROL_NBR = EDD.CONTROL_NBR FULL OUTER JOIN KYC_ATTACHMENTS DOC ON KYCCUST.CONTROL_NBR= DOC.CONTROL_NBR AND DOC.SECTION_NM='EDD' AND DOC.COMPONENT_ID is not null"
			+ " WHERE KYCCUST.CONTROL_NBR =:controlNumber AND KYCCUST.CUSTOMER_NBR =:customerNumber AND KYCCUST.CNTRY_CDE =:countryCode ";
	
		
	private static final String EDD_CUSTOMER_QUERY = "SELECT CUST.CUST_FIRST_NM,CUST.CUST_MIDDLE_NM,CUST.CUST_LAST_NM,ADDR.ADDR_LINE1, ADDR.ADDR_LINE2, "
			+ "ADDR.ADDR_LINE3,ADDR.ADDR_LINE4,ADDR.CNTRY,ADDR.CITY,ADDR.STATE,ADDR.POSTAL_CODE,IDENT.ID_NBR,IDENT.ID_CNTRY,IDENT.ID_TYPE,IDENT.PHOTO_ID_TYPE,CUST.CUST_DOB,CUST.ID_TYPE_CDD, " 
		    + "CUST.PHOTO_ID_TYPE_CDD,CUST.CUSTOMER_NAME , SEL_IDENT.ID_NBR  AS selIDNum, "
			+ "	 SEL_IDENT.ID_CNTRY AS selIDCOUNTRY" 
			+ "	 FROM KYC_CUSTOMER_DETAILS CUST "
			+ "	 FULL OUTER JOIN KYC_CUSTOMER_ADDRESS ADDR ON CUST.CONTROL_NBR = ADDR.CONTROL_NBR AND (ADDR.RECORD_STATUS IS NULL OR ADDR.RECORD_STATUS !='INACTIVE')"
		    + " AND ADDR.ADDR_TYPE = :addressType"
		    + " 	FULL OUTER JOIN (SELECT CONTROL_NBR, ID_NBR, ID_CNTRY, ID_TYPE, PHOTO_ID_TYPE FROM  KYC_CUSTOMER_DETAILS_IDENT" 
		    + "          WHERE CONTROL_NBR = :controlNumber AND PRIMARY_INDICATOR = 'P'  AND CNTRY_CDE = :countryCode" 
		    + "             AND (RECORD_STATUS IS NULL OR RECORD_STATUS != 'INACTIVE'))"
		    + "         IDENT ON CUST.CONTROL_NBR = IDENT.CONTROL_NBR "				
			+ "	 FULL OUTER JOIN (SELECT CONTROL_NBR, ID_NBR, ID_TYPE, ID_CNTRY FROM  KYC_CUSTOMER_DETAILS_IDENT " 
		    + "            WHERE CONTROL_NBR = :controlNumber AND CNTRY_CDE = :countryCode" 
		    + "         AND (RECORD_STATUS IS NULL OR RECORD_STATUS != 'INACTIVE'))"
		    + "         SEL_IDENT ON  CUST.CONTROL_NBR = SEL_IDENT.CONTROL_NBR "
		    + "          AND SEL_IDENT.ID_TYPE = CUST.ID_TYPE_CDD "
			+ "		 WHERE  CUST.CNTRY_CDE = :countryCode AND CUST.CONTROL_NBR =:controlNumber AND CUST.CUSTOMER_NBR =:customerNumber ";
			
			

	private static final String EDD_CUSTOMER_ENTITY_QUERY = " SELECT CUST.CUST_FIRST_NM,CUST.CUST_MIDDLE_NM,CUST.CUST_LAST_NM,ADDR.ADDR_LINE1, ADDR.ADDR_LINE2, "
			+ " ADDR.ADDR_LINE3,ADDR.ADDR_LINE4,ADDR.CNTRY,ADDR.CITY,ADDR.STATE,ADDR.POSTAL_CODE,IDENT.ID_NBR,IDENT.ID_CNTRY,IDENT.ID_TYPE,IDENT.PHOTO_ID_TYPE,CUST.CUST_DOB,CUST.ID_TYPE_CDD, " 
		    + "CUST.PHOTO_ID_TYPE_CDD,CUST.CUSTOMER_NAME , SEL_IDENT.ID_NBR  AS selIDNum, "
			+ " SEL_IDENT.ID_CNTRY AS selIDCOUNTRY, " 
			+ " EDD.ANNL_BUSS_REVENUE,EDD.BUSS_REVENUE_CCY ,KYCRCWS.COUNTRY_PRIMARY_OPS,EDD.SHARE_TYPE,EDD.STOCK_EXCH_NAME,EDD.PCT_PUBLIC_SHARES,EDD.SHARE_TYPE PRT_SHARE_TYPE,"
			+ " EDD.ULT_PAR_MJR_STOCK_EXCH ,EDD.NO_OF_LOCATION ,EDD.IS_HOME_BASE_BUSS,EDD.DO_CLNT_PRACT_LAW_HIGH_RISK,EDD.CLIENTS_REVIEW,"
			+ " CUST.BIZ_NATURE,  EDD.IS_CLIENT_INTER_BUSS_ONLY ,EDD.CLIENT_WEB_CONTENT,EDD.NO_OF_EMPLOYEES,CUST.MERCHANT_IND,"
			+ " DOC.ATCH_ID, DOC.ATCH_NM,EDD.VER_NUM,EDD.PRI_PLACE_OF_BUSS,EDD.PRNT_SHARE_TYPE,EDD.SRVCS_PROVD_BY_CLIENT,CUST.CUST_SICCODE,CUST.NATIONALITY, CUST.CUST_NACE_CODE  "
			+ " FROM KYC_CUSTOMER_DETAILS CUST FULL OUTER JOIN KYC_CUSTOMER_ADDRESS ADDR ON CUST.CONTROL_NBR = ADDR.CONTROL_NBR AND (ADDR.RECORD_STATUS IS NULL OR ADDR.RECORD_STATUS !='INACTIVE') AND ADDR.ADDR_TYPE =:addressType "
			+ " FULL OUTER JOIN KYC_EDD EDD ON CUST.CONTROL_NBR = EDD.CONTROL_NBR FULL OUTER JOIN KYC_CUST_RCWS_RISK_DETAILS KYCRCWS ON CUST.CONTROL_NBR=KYCRCWS.CONTROL_NBR"
			+ " 	FULL OUTER JOIN (SELECT CONTROL_NBR, ID_NBR, ID_CNTRY, ID_TYPE, PHOTO_ID_TYPE FROM  KYC_CUSTOMER_DETAILS_IDENT" 
			+ "          WHERE CONTROL_NBR = :controlNumber AND PRIMARY_INDICATOR = 'P'  AND CNTRY_CDE = :countryCode" 
			+ "             AND (RECORD_STATUS IS NULL OR RECORD_STATUS != 'INACTIVE'))"
			+ "         IDENT ON CUST.CONTROL_NBR = IDENT.CONTROL_NBR "	
			+ "	 FULL OUTER JOIN (SELECT CONTROL_NBR, ID_NBR, ID_TYPE, ID_CNTRY FROM  KYC_CUSTOMER_DETAILS_IDENT " 
			+ "            WHERE CONTROL_NBR = :controlNumber AND CNTRY_CDE = :countryCode" 
			+ "         AND (RECORD_STATUS IS NULL OR RECORD_STATUS != 'INACTIVE'))"
			+ "         SEL_IDENT ON  CUST.CONTROL_NBR = SEL_IDENT.CONTROL_NBR "
			+ "          AND SEL_IDENT.ID_TYPE = CUST.ID_TYPE_CDD "
			+ " FULL OUTER JOIN KYC_ATTACHMENTS DOC ON CUST.CONTROL_NBR= DOC.CONTROL_NBR AND DOC.SECTION_NM='EDD' AND DOC.COMPONENT_ID='CLTWEBCONT001'"
			+ " WHERE  CUST.CNTRY_CDE = :countryCode AND CUST.CONTROL_NBR =:controlNumber AND CUST.CUSTOMER_NBR =:customerNumber";
	
	
	private static final String EDD_DOCUMENT_QUERY = "SELECT DOC.ATCH_ID, DOC.ATCH_NM,DOC.COMPONENT_ID"
			+ " FROM  KYC_ATTACHMENTS DOC WHERE DOC.CONTROL_NBR =:controlNumber "
			+ " AND DOC.CUSTOMER_NBR =:customerNumber AND DOC.CNTRY_CDE =:countryCode "
			+ " AND DOC.SECTION_NM=:sectionName AND DOC.COMPONENT_ID=:componentId";
	
	private static final String EDD_RET_MERT_ENTITY_QUERY="SELECT EDD.ANNL_BUSS_REVENUE,EDD.BUSS_REVENUE_CCY , EDD.CLIENT_SUBST_DISCRP,  EDD.CLIENT_SUBST_DISCRP_DTLS,  KYCRCWS.COUNTRY_PRIMARY_OPS,  EDD.SHARE_TYPE,  "
			+ " EDD.STOCK_EXCH_NAME,  EDD.PCT_PUBLIC_SHARES,  EDD.SHARE_TYPE AS PARENT_SHARE_TYPE,  EDD.ULT_PAR_MJR_STOCK_EXCH ,  EDD.NO_OF_LOCATION ,  EDD.IS_HOME_BASE_BUSS ,  EDD.SEED_MONEY_SRC ,  EDD.SEED_MONEY_AMT,  EDD.SEED_MONEY_CCY ,  EDD.SEE_MONEY_TIMING,  EDD.SIG_REV_SRC ,  EDD.SIG_REV_AMT,"
			+ " EDD.SIG_REV_CCY ,  EDD.SIG_REV_TIMING,  EDD.CLIENTS_REVIEW ,  EDD.AML_PROGRAM_REQ,  EDD.PART_OF_TOP200_LAW,  EDD.DO_CLNT_PRACT_LAW_HIGH_RISK,  EDD.NATURE_OF_BUSINESS,  EDD.IS_CLIENT_INTER_BUSS_ONLY ,  EDD.CLIENT_WEB_CONTENT,  EDD.ADD_SCREENING_RES,  EDD.IS_CLIENT_SPV , "
			+ " EDD.IS_CLIENT_INVL_GAM,  KYCCUST.CITI_ACCT_GAMBLE_CASINO_TXN,  EDD.OWNERSHIP_3_YEARS,  EDD.OWNERSHIP_3_YEARS_DTLS,  EDD.CHANGE_IN_CLIENT_BUSS,  EDD.CHANGE_IN_CLIENT_BUSS_DTLS,  EDD.DOES_CLIENT_HOLD_CLIENT_FUND,  EDD.DOES_CLIENT_OTHER_FI_REL,  EDD.NO_OF_EMPLOYEES, "
			+ " EDD.CALL_REPORT_TXT,  EDDMAPCUST.MAP_VAL, EDDMAPCUST.CTRY , EDDMAPCUST.ENTITY_NAME,  EDDMAPCUST.FIRST_NAME,  EDDMAPCUST.MID_NAME,  EDDMAPCUST.LAST_NAME, "
			+ " EDDMAPSUPP.MAP_VAL SUPP_MAP_VAL, EDDMAPSUPP.CTRY SUPP_CNTRY_CDE ,  EDDMAPSUPP.ENTITY_NAME SUPP_ENTITY_NAME,  EDDMAPSUPP.FIRST_NAME SUPP_FIRST_NAME,  EDDMAPSUPP.MID_NAME SUPP_MID_NAME,  EDDMAPSUPP.LAST_NAME SUPP_LAST_NAME, "
			+ " EDD.TARGET_CLIENT_DESC,  EDD.CLIENT_AML_PROGRAM ,  EDD.CLIENT_AML_AUDIT,EDD.CLIENT_AML_CDD_DTLS, "
			+ " EDD.CLIENT_AML_TRANS_MON ,  EDD.CLIENT_AML_NEG_NEWS,  EDD.CLIENT_AML_BUSS_LINES,  EDD.CLIENT_AML_COMMENTS,  EDD.CLIENT_ISSUE_BEARER_SHARE,  EDD.CLIENT_OS_BEARER_SHARE , EDD.CREATED_BY,EDD.CREATED_DT,EDD.VER_NUM,"
			+ " EDDMAPCUST.VER_NUM CUST_VER_NUM,EDDMAPCUST.LBQ_MAP_ID CUST_LBQ_MAP_ID,EDDMAPSUPP.VER_NUM SUPP_VER_NUM,EDDMAPSUPP.LBQ_MAP_ID SUPP_LBQ_MAP_ID,"
			+ " DOC.ATCH_ID, DOC.ATCH_NM"
			+ " FROM KYC_CUSTOMER_DETAILS KYCCUST FULL OUTER JOIN KYC_EDD EDD ON KYCCUST.CONTROL_NBR=EDD.CONTROL_NBR" 
			+ " FULL OUTER JOIN KYC_CUST_RCWS_RISK_DETAILS KYCRCWS ON KYCCUST.CONTROL_NBR=KYCRCWS.CONTROL_NBR "
			+ " FULL OUTER JOIN KYC_EDD_MAP EDDMAPCUST ON KYCCUST.CONTROL_NBR=EDDMAPCUST.CONTROL_NBR  AND KYCCUST.CUSTOMER_NBR =EDDMAPCUST.CUSTOMER_NBR"
			+ " AND KYCCUST.CNTRY_CDE =EDDMAPCUST.CNTRY_CDE AND EDDMAPCUST.MAP_TYPE='TOP_5_CUST'"
			+ " FULL OUTER JOIN KYC_EDD_MAP EDDMAPSUPP ON KYCCUST.CONTROL_NBR=EDDMAPSUPP.CONTROL_NBR  AND KYCCUST.CUSTOMER_NBR =EDDMAPSUPP.CUSTOMER_NBR"
			+ " AND KYCCUST.CNTRY_CDE =EDDMAPSUPP.CNTRY_CDE AND EDDMAPSUPP.MAP_TYPE='TOP_5_SUPP'"
			+ " FULL OUTER JOIN KYC_ATTACHMENTS DOC ON KYCCUST.CONTROL_NBR= DOC.CONTROL_NBR AND DOC.SECTION_NM='EDD' AND DOC.COMPONENT_ID is not null"
			+ " WHERE KYCCUST.CONTROL_NBR =:controlNumber AND KYCCUST.CUSTOMER_NBR =:customerNumber AND KYCCUST.CNTRY_CDE =:countryCode";

	 
  	private static final String CUSTOMER_IDTYPE_QUERY = "SELECT DISTINCT IDENT.ID_TYPE,IDENT.ID_NBR,(SELECT PH.PICK_LIST_DESCR FROM PICK_LIST_LKUP PH WHERE PH.PICK_LIST_TYPE='ID_NUM_TYPE' AND PH.PICK_LIST_CODE  = IDENT.ID_TYPE)PICK_DESC "
			+ " FROM  KYC_CUSTOMER_DETAILS_IDENT IDENT  WHERE IDENT.CNTRY_CDE  = :countryCode AND IDENT.customer_nbr = :customerNumber AND IDENT.CONTROL_NBR =:controlNumber AND (IDENT.RECORD_STATUS IS NULL OR IDENT.RECORD_STATUS != 'INACTIVE')";
	
	private static final String MEMBER_IDTYPE_QUERY = "SELECT DISTINCT MEMIDENT.MEMBER_ID,MEMIDENT.ID_TYPE, MEMIDENT.ID_NBR ,(SELECT PH.PICK_LIST_DESCR FROM PICK_LIST_LKUP PH WHERE PH.PICK_LIST_TYPE='ID_NUM_TYPE' AND PH.PICK_LIST_CODE  = MEMIDENT.ID_TYPE)PICK_DESC_MEM "
			+ " FROM  KYC_MEMBER_IDENTIFICATION MEMIDENT  WHERE MEMIDENT.MEMBER_CNTRY_CODE  = :countryCode AND MEMIDENT.CONTROL_NBR =:controlNumber  AND (MEMIDENT.RECORD_STATUS IS NULL OR MEMIDENT.RECORD_STATUS != 'INACTIVE')";
	
	private static final String EDD_MAPPING_RET_MERT_QUERY="SELECT EDDMAP.MAP_VAL, EDDMAP.CTRY , EDDMAP.ENTITY_NAME,  EDDMAP.FIRST_NAME,  EDDMAP.MID_NAME,  EDDMAP.LAST_NAME,EDDMAP.MAP_TYPE,EDDMAP.DONOR_NAME,EDDMAP.FUNDS_PROVIDED,EDDMAP.CNTRY_OF_RESIDENCE FROM KYC_EDD_MAP EDDMAP"
			+ " WHERE EDDMAP.CONTROL_NBR =:controlNumber AND EDDMAP.CUSTOMER_NBR =:customerNumber AND EDDMAP.CNTRY_CDE =:countryCode AND EDDMAP.LBQ_MAP_ID=:mapSeqId";
  
	private static final String EDD_MAPPING_QUERY="SELECT EDDMAP.MAP_TYPE,EDDMAP.MAP_VAL,EDDMAP.LBQ_MAP_ID,EDDMAP.VER_NUM FROM KYC_EDD_MAP EDDMAP"
			+ " WHERE EDDMAP.CONTROL_NBR =:controlNumber AND EDDMAP.CUSTOMER_NBR =:customerNumber AND EDDMAP.CNTRY_CDE =:countryCode AND EDDMAP.MAP_TYPE NOT IN (:mapTypes) ORDER BY EDDMAP.LBQ_MAP_ID ";

	
	private static final String DELETE_EDDMAP_QUERY="delete from KycEddMapEntity where lbqMapId in (:LBQ_MAP_ID) ";
	private static final String DELETE_EDDMAP_BYTYPE_QUERY="delete from KycEddMapEntity where controlNbr=:controlNbr "
			+ " and customerNbr=:customerNbr and cntryCde=:cntryCde and mapType in  (:mapType) and mapVal in (:mapVal) ";
	
	private static final String DELETE_UBOMAP_BYTYPE_QUERY="delete from KycMemberUBOMapEntity where memberUBOID=:memUBOId "
			+ " and  mapType in  (:mapType) and mapVal in (:mapVal)";

private static final String EDD_RET_ENTITY_MEMBER_QUERY = "SELECT MEM.CUST_FIRST_NM,(SELECT LISTAGG(ROLE_MAP.MEMBER_ROLE,',') WITHIN GROUP ( ORDER BY ROLE_MAP.MEMBER_ROLE) "
		+ " FROM KYC_MEMBER_CUST_ROLE_MAP ROLE_MAP WHERE MEM.MEMBER_ID= ROLE_MAP.MEMBER_ID  "
		+ " AND MEM.CONTROL_NBR=ROLE_MAP.CONTROL_NBR AND (ROLE_MAP.RECORD_STATUS IS NULL  OR ROLE_MAP.RECORD_STATUS != 'INACTIVE')) MEMBER_ROLE,"
		+ " (SELECT LISTAGG(ROLE_MAP.REL_TYPE,',') WITHIN GROUP ( ORDER BY ROLE_MAP.MEMBER_ROLE) FROM KYC_MEMBER_CUST_ROLE_MAP ROLE_MAP  "
		+ " WHERE MEM.MEMBER_ID= ROLE_MAP.MEMBER_ID  AND MEM.CONTROL_NBR=ROLE_MAP.CONTROL_NBR AND (ROLE_MAP.RECORD_STATUS IS NULL  OR ROLE_MAP.RECORD_STATUS != 'INACTIVE')) REL_TYPE,CUST.CUST_RESIDENCE_CNTRY,"
		+ " (SELECT LISTAGG(ROLE_MAP.PCT_OWNERSHIP,',') WITHIN GROUP ( ORDER BY ROLE_MAP.MEMBER_ROLE) FROM KYC_MEMBER_CUST_ROLE_MAP ROLE_MAP "
		+ " WHERE MEM.MEMBER_ID= ROLE_MAP.MEMBER_ID  AND MEM.CONTROL_NBR=ROLE_MAP.CONTROL_NBR AND (ROLE_MAP.RECORD_STATUS IS NULL  OR ROLE_MAP.RECORD_STATUS != 'INACTIVE')) PCT_OWNERSHIP,"
		+ " UBO.CORRB_WEALTH_PERCENT,UBO.SRC_OF_WLTH_CORROB,MEM.MEMBER_ID, "
		+ " (SELECT LISTAGG(UBOMAP.MAP_VAL,',') WITHIN GROUP ( ORDER BY UBOMAP.MAP_VAL) FROM KYC_MEMBER_UBO_MAP UBOMAP WHERE UBO.MEMBER_UBO_ID = UBOMAP.MEMBER_UBO_ID AND UBOMAP.MAP_TYPE='SOW')  SOW, "
		+ " (SELECT LISTAGG(UBOMAP.MAP_VAL,',') WITHIN GROUP ( ORDER BY UBOMAP.MAP_VAL) FROM KYC_MEMBER_UBO_MAP UBOMAP WHERE UBO.MEMBER_UBO_ID = UBOMAP.MEMBER_UBO_ID AND UBOMAP.MAP_TYPE='CORROB_DOC_TYPE')  CORROB,  "
		+ " CUST.RISK_RATING, CUST.NATIONALITY, CUST.CUST_REG_CTRY , UBO.MEMBER_UBO_ID ,UBO.VER_NUM AS UBOVERNUM,"
		+ " ATCH.ATCH_ID, ATCH.ATCH_NM,MEM.MEMBER_CUSTOMER_NBR,MEM.CUSTOMER_NAME, CASE WHEN (SELECT LISTAGG(ROLE_MAP.MEMBER_ROLE,',') WITHIN GROUP ( ORDER BY ROLE_MAP.MEMBER_ROLE) "
		+ " FROM KYC_MEMBER_CUST_ROLE_MAP ROLE_MAP WHERE MEM.MEMBER_ID= ROLE_MAP.MEMBER_ID  "
		+ " AND MEM.CONTROL_NBR=ROLE_MAP.CONTROL_NBR AND (ROLE_MAP.RECORD_STATUS IS NULL  OR ROLE_MAP.RECORD_STATUS != 'INACTIVE')) = 'CLIENT' THEN 1 ELSE 0 END AS MTYPE_PRIR FROM KYC_MEMBER_DETAILS MEM "
		+"  FULL OUTER JOIN KYC_MEMBER_UBO_DETAILS UBO ON MEM.MEMBER_ID = UBO.MEMBER_ID AND MEM.CONTROL_NBR=UBO.CONTROL_NBR FULL OUTER JOIN CUSTOMER_DETAILS  CUST ON MEM.MEMBER_CUSTOMER_NBR= CUST.CUSTOMER_NBR"
		+ " FULL OUTER JOIN KYC_ATTACHMENTS ATCH ON MEM.CONTROL_NBR = ATCH.CONTROL_NBR  AND MEM.CUSTOMER_NBR  = ATCH.CUSTOMER_NBR  AND MEM.CNTRY_CDE=ATCH.CNTRY_CDE AND MEM.MEMBER_ID=ATCH.COMPONENT_ID AND ATCH.ATCH_REMARKS ='EDD' AND ROWNUM=1"
		+ " WHERE MEM.CONTROL_NBR=:controlNumber AND MEM.CUSTOMER_NBR =:customerNumber AND MEM.CNTRY_CDE=:countryCode AND (MEM.RECORD_STATUS IS NULL  OR MEM.RECORD_STATUS != 'INACTIVE') AND (MEM.MEMBER_TYPE !='INTERNAL' OR MEM.MEMBER_TYPE IS NULL) ORDER BY MTYPE_PRIR DESC,MEMBER_ID";

	private static final String PICK_LIST_HIGH_RISK_COUNTRIES = " SELECT PICK_LIST_CODE FROM PICK_LIST_LKUP WHERE PICK_LIST_TYPE='ISO_COUNTRY_LKUP' AND  RISK_RATING='H' " ;
	
	private static final String HIGH_RISK_COUNTRIES_LIST = "SELECT DISTINCT ATTR_VALUE1 FROM AML_CDD_CONFIG_DETAIL WHERE ATTR_CODE='COUNTRY_RES' AND ATTR_MAX_SCORE=20 AND RISK_SCORE >=12" ;

	private static final String PICK_LIST_RELATIONSHIP_TYPE = " SELECT CODE_EXT_VALU, CODE_SHRT_DESC FROM DRI_RM_CDVT_FULL WHERE CODE_INDX='00118'  ORDER BY CODE_SHRT_DESC " ;

	private static final String PICK_LIST_ASSOCIATION_TYPE = " SELECT CODE_EXT_VALU, CODE_SHRT_DESC FROM DRI_RM_CDVT_FULL WHERE CODE_INDX='00114' ORDER BY CODE_SHRT_DESC " ;

	private static final List<String> mapTypeList=Stream.of("TOP_5_CUST","TOP_5_SUPP").collect(Collectors.toList());/*new ArrayList<String>({"TOP_5_CUST","TOP_5_SUPP"});*/
	
	//private static final List<String> mapTypeList=Stream.of("LEGAL_ENTITY","LEGAL_FORM_DOCS").collect(Collectors.toList());/*new ArrayList<String>({"TOP_5_CUST","TOP_5_SUPP"});*/
	

	private static final String CUSTOMER_IDTYPE_COUNT = "SELECT COUNT(1) FROM KYC_CUSTOMER_DETAILS CUST WHERE CUST.ID_TYPE_CDD IS NOT NULL AND CUST.PHOTO_ID_TYPE_CDD IS NOT NULL AND CUST.CNTRY_CDE = :countryCode  AND CUST.CONTROL_NBR=:controlNumber "
			+ " AND CUST.CUSTOMER_NBR =:customerNumber AND (CUST.RECORD_STATUS IS NULL  OR CUST.RECORD_STATUS != 'INACTIVE')" ;

	private static final String MEMBER_IDTYPE_COUNT = "SELECT COUNT(1) FROM KYC_MEMBER_DETAILS MEMBER WHERE MEMBER.ID_TYPE_CDD IS NOT NULL AND MEMBER.PHOTO_ID_TYPE_CDD IS NOT NULL AND MEMBER.CNTRY_CDE = :countryCode  AND MEMBER.CONTROL_NBR=:controlNumber "
			+ " AND MEMBER.CUSTOMER_NBR =:customerNumber AND (MEMBER.RECORD_STATUS IS NULL  OR MEMBER.RECORD_STATUS != 'INACTIVE')" ;
	
	private static final String PRIMARY_INDICATOR = " AND IDENT.PRIMARY_INDICATOR = 'P' AND ROWNUM <= 1"; 
	private static final String MEMBER_PRIMARY_INDICATOR = " AND IDENT.PRIMARY_INDICATOR = 'P'"; 
    private static final String CUST_ID_TYPE_CDD = " AND CUST.ID_TYPE_CDD IS NOT NULL AND CUST.PHOTO_ID_TYPE_CDD IS NOT NULL AND CUST.ID_TYPE_CDD = IDENT.ID_TYPE "; 
    private static final String MEMBER_ID_TYPE_CDD_1 = " AND MEMBER.ID_TYPE_CDD IS NOT NULL AND MEMBER.PHOTO_ID_TYPE_CDD IS NOT NULL AND MEMBER.MEMBER_ID = IDENT.MEMBER_ID  "; 
    private static final String MEMBER_ID_TYPE_CDD = " AND MEMBER.MEMBER_ID = IDENT.MEMBER_ID  ";
    private static final String UPDATE_MEMBER_DETAILS_QUERY= "UPDATE KYC_MEMBER_DETAILS MEMBER1 SET MEMBER1.ID_TYPE_CDD= :cddIdType,MEMBER1.PHOTO_ID_TYPE_CDD =:cddPhotoIdType  WHERE MEMBER1.CONTROL_NBR =:controlNumber "
			+ " AND MEMBER1.CUSTOMER_NBR =:customerNumber AND MEMBER1.CNTRY_CDE =:countryCode AND MEMBER1.MEMBER_ID =:membrId ";
	private static final String ID_VERIFICATION_MEANS = "Documentary"; 
	private static final String NON_FORM_QUERY= "SELECT  KYCCUST.INCORPORATED_DATE,KYCCUST.CUST_SICCODE FROM KYC_CUSTOMER_DETAILS KYCCUST WHERE KYCCUST.CONTROL_NBR =:controlNumber AND KYCCUST.CUSTOMER_NBR =:customerNumber AND KYCCUST.CNTRY_CDE =:countryCode";
	@Override
	public KycEddEntity getAllEddDetails(String controlNumber, String countryCode,
			String customerNumber){
		logger.info("Inside the class EddDaoImpl---> method :findAllEddDetails for countryCode:"+ countryCode+ "-" + "controlNumber:"+ controlNumber+"-"+"customerNumber:"+customerNumber);
		KycEddEntity kycEddEntity=null;
		Query query=getSession().getNamedQuery("KycEddEntity.findAll");
		query.setParameter("controlNbr", controlNumber);
		query.setParameter("customerNbr", customerNumber);
		query.setParameter("cntryCde", countryCode);
		List<KycEddEntity> kycEddEntityList=query.list();
		if(kycEddEntityList!=null && kycEddEntityList.size()>0){
		kycEddEntity=(KycEddEntity) query.list().get(0);
		}
		logger.info("Exits the class EddDaoImpl---> method : findAllEddDetails");
		return kycEddEntity;
		
	}
	
	@Override
	public List<KycAttachmentEntity> getAttachments(String controlNumber, String countryCode,
			String customerNumber, String componentId){
		logger.info("Inside the class EddDaoImpl---> method :findAllEddDetails for countryCode:"+ countryCode+ "-" + "controlNumber:"+ controlNumber+"-"+"customerNumber:"+customerNumber);
		Query query=null;
			query = getSession().createSQLQuery(EDD_DOCUMENT_QUERY);
		//Query query=getSession().getNamedQuery("KycAttachmentEntity.findAttachments");
		query.setParameter("controlNumber", controlNumber);
		query.setParameter("customerNumber", customerNumber);
		query.setParameter("countryCode", countryCode);
		query.setParameter("sectionName", AMLCDDConstants.EDD);
		query.setParameter("componentId", componentId);
		List<KycAttachmentEntity> eddAttachments=new ArrayList<KycAttachmentEntity>();
		List<Object[]> eddAttachmentList = query.list();
		if(eddAttachmentList!= null && eddAttachmentList.size() > 0) {
			logger.info(" member Size " + eddAttachmentList.size());
			KycAttachmentEntity attachmentEntity = null;
			Iterator<Object[]> iterator = eddAttachmentList.iterator();
			while (iterator.hasNext()) {
				Object[] obj = iterator.next();
				attachmentEntity=new KycAttachmentEntity();
				attachmentEntity.setAtchId(obj[0]==null?"":obj[0].toString());
				attachmentEntity.setAtchNm(obj[1]==null?"":obj[1].toString());
				attachmentEntity.setComponentId(obj[2]==null?"":obj[2].toString());
				eddAttachments.add(attachmentEntity);
			}
		}
		logger.info("Exits the class EddDaoImpl---> method : getAttachments");
		return eddAttachments;
		
	}
	
	
	@Override
	public List<KycEddMapEntity> getEddMappingEntityDetails(String controlNumber, String countryCode,
			String customerNumber){
		logger.info("Inside the class EddDaoImpl---> method :findAllEddDetails for countryCode:"+ countryCode+ "-" + "controlNumber:"+ controlNumber+"-"+"customerNumber:"+customerNumber);
		Query query=null;
			query = getSession().createSQLQuery(EDD_MAPPING_QUERY);
		//Query query=getSession().getNamedQuery("KycEddMapEntity.findByMapTYpe");
		query.setParameter("controlNumber", controlNumber);
		query.setParameter("customerNumber", customerNumber);
		query.setParameter("countryCode", countryCode);
		query.setParameterList("mapTypes", mapTypeList);
		
		List<KycEddMapEntity> eddMappingDtls=new ArrayList<KycEddMapEntity>();
		List<Object[]> eddMappingDtlsList = query.list();
		if(eddMappingDtlsList!= null && eddMappingDtlsList.size() > 0) {
			
			logger.info(" member Size " + eddMappingDtlsList.size());
			KycEddMapEntity kycEddMapEntity = null;
			Iterator<Object[]> iterator = eddMappingDtlsList.iterator();
			while (iterator.hasNext()) {
				Object[] obj = iterator.next();
				kycEddMapEntity=new KycEddMapEntity();
				kycEddMapEntity.setMapType(obj[0]==null?"":obj[0].toString());
				kycEddMapEntity.setMapVal(obj[1]==null?"":obj[1].toString());
				kycEddMapEntity.setLbqMapId(obj[2]==null?"":obj[2].toString());
				kycEddMapEntity.setVerNum(obj[3]==null?null:Long.parseLong(obj[3].toString()));
				eddMappingDtls.add(kycEddMapEntity);
			}
		}
		logger.info("Exits the class EddDaoImpl---> method : findAllEddDetails");
		return eddMappingDtls;
		
	}
	
	@Override
	public List<KycEddMapEntity> getAllEddMappingDetails(String controlNumber, String countryCode,
			String customerNumber,String mapType){
		logger.info("Inside the class EddDaoImpl---> method :findAllEddDetails for countryCode:"+ countryCode+ "-" + "controlNumber:"+ controlNumber+"-"+"customerNumber:"+customerNumber);
		Query query=getSession().getNamedQuery("KycEddMapEntity.findByMapTYpe");
		query.setParameter("controlNbr", controlNumber);
		query.setParameter("customerNbr", customerNumber);
		query.setParameter("cntryCde", countryCode);
		query.setParameter("mapList", mapType);
		List<KycEddMapEntity> eddMappingDtlsList=query.list();
		logger.info("Exits the class EddDaoImpl---> method : findAllEddDetails");
		return eddMappingDtlsList;
		
	}
	

	@Override
	public ArrayList<EddMemberEntity> getEddMemberDetails(String controlNumber, String countryCode,
			String customerNumber, String clientType) throws ParseException {
		logger.info("Inside getEddMemberDetails for controlNumber" + controlNumber + "customerNumber:" + customerNumber);
		ArrayList<EddMemberEntity> listEDDMemberEntity = new ArrayList<EddMemberEntity>();
		Query query = null;
		if (clientType.equals(AMLCDDConstants.CARDS_ENTITY)) {
			query = getSession().createSQLQuery(EDD_MEMBER_QUERY);
		} else {
			query = getSession().createSQLQuery(EDD_MEMBER_FOR_CARDS_IND_QUERY);
		}
		
		query.setParameter("countryCode", countryCode);
		query.setParameter("controlNumber", controlNumber);
		query.setParameter("customerNumber", customerNumber);
		query.setParameter("addressType", "001");// to be changed to 001
		List<Object[]> memberList = query.list();
		if(memberList!= null && memberList.size() > 0) {
			logger.info(" member Size " + memberList.size());
			EddMemberEntity objEDDMemberEntity = null;
			Iterator<Object[]> iterator = memberList.iterator();
			while (iterator.hasNext()) {
				String strBuilder ="";
				Object[] obj = iterator.next();
				objEDDMemberEntity = new EddMemberEntity();
				objEDDMemberEntity.setFirstName(obj[0]== null ? "" : obj[0].toString());
				objEDDMemberEntity.setMiddleName(obj[1]== null ? "" : obj[1].toString());
				objEDDMemberEntity.setLastName(obj[2]== null ? "" : obj[2].toString());
				objEDDMemberEntity.setAddressLine1(obj[3]== null ? "" : obj[3].toString());
				objEDDMemberEntity.setAddressLine2(obj[4]== null ? "" : obj[4].toString());
				objEDDMemberEntity.setAddressLine3(obj[5]== null ? "" : obj[5].toString());
				objEDDMemberEntity.setAddressLine4(obj[6]== null ? "" : obj[6].toString());
				objEDDMemberEntity.setPrimaryCountry(obj[7]== null ? "" : obj[7].toString());
				objEDDMemberEntity.setPrimaryCity(obj[8]== null ? "" : obj[8].toString());
				objEDDMemberEntity.setPrimaryState(obj[9]== null ? "" : obj[9].toString());
				objEDDMemberEntity.setPostalCode(obj[10]== null ? "" : obj[10].toString());
				objEDDMemberEntity.setIdNumber(obj[22]== null ? (obj[11] == null ? "" : obj[11].toString() ) : obj[22].toString());
				objEDDMemberEntity.setIdCountry(obj[23]== null ? (obj[12] == null ? "" : obj[12].toString() ) : obj[23].toString());
				objEDDMemberEntity.setCitizenshipCountry(obj[24]== null ?  "" : obj[24].toString());
				//If CDD ID Type is selected use that field else use P ; 13 - P ; 19 - CDD ID Type 
				objEDDMemberEntity.setIdType((obj[19] == null || obj[19].toString().isEmpty()) ? (obj[13]== null ? "" : obj[13].toString()) : obj[19].toString());
				objEDDMemberEntity.setIdVerfMeans(ID_VERIFICATION_MEANS); 
				
				objEDDMemberEntity.setPhotoIdType((obj[20] == null || obj[20].toString().isEmpty()) ? (obj[13]== null ? "" : obj[13].toString()) : obj[20].toString());
				if (clientType.equals(AMLCDDConstants.CARDS_INDIV)) {
					objEDDMemberEntity.setMemberRole(obj[26] == null ? (obj[15]== null ?  "" : obj[15].toString()) : obj[26].toString());
				} else if(clientType.equals(AMLCDDConstants.CARDS_ENTITY)) {
					objEDDMemberEntity.setMemberRole(obj[15]== null ?  "" : obj[15].toString());
				}
				
				objEDDMemberEntity.setMemberRoleDesc(obj[15]== null ?  "" : obj[15].toString());
				StringTokenizer st = new StringTokenizer(objEDDMemberEntity.getMemberRole(),",");
				
				while (st.hasMoreTokens()) {  
					strBuilder=strBuilder+ st.nextToken()+"\r\n";
			     }  
				objEDDMemberEntity.setAssociationtoClient(strBuilder);
				objEDDMemberEntity.setDateOfBirth(obj[16]== null ? "" : CommonUtility.getFormatedDate((Date)obj[16]));
				objEDDMemberEntity.setMemberId(obj[17]== null ? "" : obj[17].toString());
				objEDDMemberEntity.setRelType(obj[18]== null ? "" : obj[18].toString());
				objEDDMemberEntity.setCddIdType(obj[19]== null ? (obj[13] == null ? "" : obj[13].toString() ) : obj[19].toString());
				objEDDMemberEntity.setCddPhotoIdType(obj[20]== null ? (obj[13] == null ? "" : obj[13].toString()) : obj[20].toString());
				objEDDMemberEntity.setCustomerName(obj[21]== null ? "" : obj[21].toString());
				objEDDMemberEntity.setCustomerNbr(customerNumber);
				objEDDMemberEntity.setMemberCustomerNbr(obj[25]== null ? "" : obj[25].toString());
				listEDDMemberEntity.add(objEDDMemberEntity);
			}
			logger.info("Exit getEddMemberDetails for controlNumber" + controlNumber + "customerNumber:" + customerNumber+" Output List size"+listEDDMemberEntity.size());
		}
		return listEDDMemberEntity;
	}
	public ArrayList<EddMemberEntity> getEddCustomerDetails(CddBaseVO cddBaseVO) throws ParseException {
		logger.info("Inside getEddCustomerDetails for controlNumber" + cddBaseVO.getCddControlNumber() + "customerNumber:" + cddBaseVO.getCustNumber());
		ArrayList<EddMemberEntity> listEDDMemberEntity = new ArrayList<EddMemberEntity>();
		Query query=null;
		if(AMLCDDConstants.CARDS_INDIV.equalsIgnoreCase(cddBaseVO.getClientType())){
			query = getSession().createSQLQuery(EDD_CUSTOMER_QUERY);
		}
		else if(AMLCDDConstants.CARDS_ENTITY.equalsIgnoreCase(cddBaseVO.getClientType())){
			query = getSession().createSQLQuery(EDD_CUSTOMER_ENTITY_QUERY);
		}
		query.setParameter("countryCode", cddBaseVO.getCountry());
		query.setParameter("controlNumber", cddBaseVO.getCddControlNumber());
		query.setParameter("customerNumber", cddBaseVO.getCustNumber());
		query.setParameter("addressType", "001");// to be changed to 001
		
		List<Object[]> memberList = query.list();
		if(memberList!= null && memberList.size() > 0) {
			logger.info(" member Size " + memberList.size());
			EddMemberEntity objEDDMemberEntity = null;
			Iterator<Object[]> iterator = memberList.iterator();
			if(memberList.get(0)!=null){
				Object[] obj =memberList.get(0);
				objEDDMemberEntity = new EddMemberEntity();
				objEDDMemberEntity.setFirstName(obj[0]== null ? "" : obj[0].toString());
				objEDDMemberEntity.setMiddleName(obj[1]== null ? "" : obj[1].toString());
				objEDDMemberEntity.setLastName(obj[2]== null ? "" : obj[2].toString());
				objEDDMemberEntity.setAddressLine1(obj[3]== null ? "" : obj[3].toString());
				objEDDMemberEntity.setAddressLine2(obj[4]== null ? "" : obj[4].toString());
				objEDDMemberEntity.setAddressLine3(obj[5]== null ? "" : obj[5].toString());
				objEDDMemberEntity.setAddressLine4(obj[6]== null ? "" : obj[6].toString());
				objEDDMemberEntity.setPrimaryCountry(obj[7]== null ? "" : obj[7].toString());
				objEDDMemberEntity.setPrimaryCity(obj[8]== null ? "" : obj[8].toString());
				objEDDMemberEntity.setPrimaryState(obj[9]== null ? "" : obj[9].toString());
				objEDDMemberEntity.setPostalCode(obj[10]== null ? "" : obj[10].toString());
				//objEDDMemberEntity.setIdNumber(obj[11]== null ? "" : obj[11].toString());
				objEDDMemberEntity.setIdNumber(obj[19]== null ? (obj[11] == null ? "" : obj[11].toString() ) : obj[19].toString());
				//objEDDMemberEntity.setIdCountry(obj[12]== null ? "" : obj[12].toString());
				objEDDMemberEntity.setIdCountry(obj[20]== null ? (obj[12] == null ? "" : obj[12].toString() ) : obj[20].toString());
				
				//objEDDMemberEntity.setIdType(obj[13]== null ? "" : obj[13].toString());
				objEDDMemberEntity.setIdType((obj[16] == null || obj[16].toString().isEmpty()) ? (obj[13]== null ? "" : obj[13].toString()) : obj[16].toString());
				
				objEDDMemberEntity.setIdVerfMeans(ID_VERIFICATION_MEANS); 
				//objEDDMemberEntity.setPhotoIdType(obj[14]== null ? "" : obj[14].toString());
				objEDDMemberEntity.setPhotoIdType((obj[17] == null || (obj[13]== null || (obj[13]!= null && obj[13].toString().isEmpty()))) ? (obj[13]== null ? "" : obj[13].toString()) : obj[17].toString());
				
				objEDDMemberEntity.setMemberRole("CLIENT");
				objEDDMemberEntity.setMemberRoleDesc(objEDDMemberEntity.getMemberRole());
				objEDDMemberEntity.setAssociationtoClient(objEDDMemberEntity.getMemberRole());
				objEDDMemberEntity.setMemberId("");
				objEDDMemberEntity.setRelType("");
				objEDDMemberEntity.setDateOfBirth(obj[15]== null ? "" : CommonUtility.getFormatedDate((Date)obj[15]));
				objEDDMemberEntity.setCddIdType(obj[16]== null ? (obj[13] == null ? "" : obj[13].toString()) : obj[16].toString());
				objEDDMemberEntity.setCddPhotoIdType(obj[17]== null ? (obj[13] == null ? "" : obj[13].toString()) : obj[17].toString());
				objEDDMemberEntity.setCustomerName(obj[18]== null ? "" : obj[18].toString());
				objEDDMemberEntity.setCustomerNbr(cddBaseVO.getCustNumber());
				objEDDMemberEntity.setMemberCustomerNbr(cddBaseVO.getCustNumber());
				
				if(AMLCDDConstants.CARDS_ENTITY.equalsIgnoreCase(cddBaseVO.getClientType())){
					KycEddDetailsVO kycEddDetailsVO = new KycEddDetailsVO();
					kycEddDetailsVO.setAnnlBussRevenue(obj[21]== null ? "" : obj[21].toString());
					kycEddDetailsVO.setBussRevenueCcy(obj[22]== null ? "" : obj[22].toString());
					//kycEddDetailsVO.setCountriesOfPrimOpers(obj[23]== null ? "" : obj[23].toString());
					kycEddDetailsVO.setShareType(obj[24]== null ? "" : obj[24].toString());
					kycEddDetailsVO.setStockExchName(obj[25]== null ? "" : obj[25].toString());
					kycEddDetailsVO.setPctPublicShares(obj[26]== null ? "" : obj[26].toString());
					
					kycEddDetailsVO.setIdCountry(obj[20]== null ? (obj[12] == null ? "" : obj[12].toString() ) : obj[20].toString());
					// yet to decide
					//kycEddDetailsVO.setIsParentPubliclyTraded(obj[27]== null ? "" : obj[27].toString());
					
					kycEddDetailsVO.setUltParMjrStockExch(obj[28]== null ? "" : obj[28].toString());
					
					kycEddDetailsVO.setPrimaryCountry(obj[7]== null ? "" : obj[7].toString());
					
					kycEddDetailsVO.setNoOfLocation(obj[29]== null ? "" : obj[29].toString());
				//	kycEddDetailsVO.setPrim(obj[7]== null ? "" : obj[7].toString());
					kycEddDetailsVO.setIsHomeBaseBuss(obj[30]== null ? "" : obj[30].toString());
					kycEddDetailsVO.setDoClntPractLawHighRisk(obj[31]== null ? "" : obj[31].toString());
					kycEddDetailsVO.setClientsReview(obj[32]== null ? "" : obj[32].toString());
					kycEddDetailsVO.setNatureOfBusiness(obj[33]== null ? "" : obj[33].toString());
					
					kycEddDetailsVO.setIsClientInterBussOnly(obj[34]== null ? "" : obj[34].toString());
					kycEddDetailsVO.setClientWebContent(obj[35]== null ? "" : obj[35].toString());
					kycEddDetailsVO.setNoOfEmployees(obj[36]== null ? "" : obj[36].toString());
					kycEddDetailsVO.setAttachmentId(obj[38]== null ? "" : obj[38].toString());
					kycEddDetailsVO.setAttachmentName(obj[39]== null ? "" : obj[39].toString());
					kycEddDetailsVO.setVerNum(obj[40]== null ? "" : obj[40].toString());
					
					if(obj[41]!=null){
						kycEddDetailsVO.setCountriesOfPrimOpers(Arrays.stream(obj[41].toString().split("~")).map(String::trim).toArray(String[]::new)/*(String[])kycEddDetailsVO.getPriBusiPlaces().toArray()*/);
						}
						kycEddDetailsVO.setPrtShareType(obj[42]== null ? "" : obj[42].toString());
						kycEddDetailsVO.setDoesClientServices(obj[43]== null ? "" : obj[43].toString());
						//kycEddDetailsVO.setIndustryClassificationSystemNAIC(obj[44]== null ? "" : obj[44].toString());
						objEDDMemberEntity.setCitizenshipCountry(obj[45]== null ? "" : obj[45].toString());
						kycEddDetailsVO.setIndustryClassificationSystemNAIC(obj[46]== null ? "" : obj[46].toString());
						
					//if(obj[40]!=null){
						//kycEddDetailsVO.setIndustryClassificationSystemNAIC("Banks"); //need to take after db column addded kycEddDetailsVO.setIndustryClassificationSystemNAIC(obj[40]== null ? "" : obj[40].toString());
						//}
						
					objEDDMemberEntity.setKycEddDetailsVO(kycEddDetailsVO);
				}
				
				listEDDMemberEntity.add(objEDDMemberEntity);
			}
			logger.info("Exit getEddCustomerDetails for controlNumber" + cddBaseVO.getCddControlNumber() + "customerNumber:" + cddBaseVO.getCustNumber()+" Output List size"+listEDDMemberEntity.size());
		}
		return listEDDMemberEntity;
	}
	@Override
	public EddDetailsEntity getEddDetails(String controlNumber, String countryCode, String customerNumber)
			throws ParseException {
		logger.info("Inside getEddDetails for controlNumber" + controlNumber + "customerNumber:" + customerNumber);
		Query query = getSession().createSQLQuery(EDD_DETAILS_QUERY);
		query.setParameter("countryCode", countryCode);
		query.setParameter("controlNumber", controlNumber);
		query.setParameter("customerNumber", customerNumber);
		List<Object[]> eddDetailsList = query.list();
		logger.info("Inside getEddDetails  Query result Size"+ eddDetailsList.size());
		EddDetailsEntity objEddDetailsEntity = null;
		Iterator<Object[]> iterator = eddDetailsList.iterator();
		while (iterator.hasNext()) {
			Object[] obj = iterator.next();
			objEddDetailsEntity = new EddDetailsEntity();
				objEddDetailsEntity.setEmploymentType(obj[0]== null ? "" : obj[0].toString());
				objEddDetailsEntity.setOtherEmploymentType(obj[1]== null ? "" : obj[1].toString());
				objEddDetailsEntity.setIsCurrentlyEmployed(obj[2]== null ? "" : obj[2].toString());
				objEddDetailsEntity.setEmployerName(obj[3]== null ? "" : obj[3].toString());
				objEddDetailsEntity.setEmployerAddress1(obj[4]== null ? "" : obj[4].toString());
				objEddDetailsEntity.setEmployerAddress2(obj[5]== null ? "" : obj[5].toString());
				objEddDetailsEntity.setEmployerAddress3(obj[6]== null ? "" : obj[6].toString());
				objEddDetailsEntity.setEmployerAddress4(obj[7]== null ? "" : obj[7].toString());
				objEddDetailsEntity.setEmployerAddressCity(obj[8]== null ? "" : obj[8].toString());
				objEddDetailsEntity.setEmployerAddressState(obj[9]== null ? "" : obj[9].toString());
				objEddDetailsEntity.setEmployerAddressCountry(obj[10]== null ? "" : obj[10].toString());
				objEddDetailsEntity.setEmployerAddressPostalCode(obj[11]== null ? "" : obj[11].toString());
				objEddDetailsEntity.setBusinessPhone(obj[12]== null ? "" : obj[12].toString());
				objEddDetailsEntity.setBusinessWebsite(obj[13]== null ? "" : obj[13].toString());
				objEddDetailsEntity.setBusinessEmail(obj[14]== null ? "" : obj[14].toString());
				objEddDetailsEntity.setBusinessFax(obj[15]== null ? "" : obj[15].toString());
				objEddDetailsEntity.setBusinessType(obj[16]== null ? "" : obj[16].toString());
				objEddDetailsEntity.setGeographicLocation(obj[17]== null ? "" : obj[17].toString());
				objEddDetailsEntity.setSubsetDiscrepancy(obj[18]== null ? "" : obj[18].toString());
				objEddDetailsEntity.setSubsetDiscrepancyDetails(obj[19]== null ? "" : obj[19].toString());
				objEddDetailsEntity.setRelationshipLength(obj[20]== null ? "" : obj[20].toString());
				objEddDetailsEntity.setIsInternetGamblingBus(obj[21]== null ? "" : obj[21].toString());
				objEddDetailsEntity.setMajorInvestmentCountry(obj[22]== null ? "" : obj[22].toString());
				objEddDetailsEntity.setNetWorthCurrency(obj[23]== null ? "" : obj[23].toString());
				objEddDetailsEntity.setNetWorthAmount(obj[24]== null ? "" : obj[24].toString());
				objEddDetailsEntity.setAssets(obj[25]== null ? "" : obj[25].toString());
				objEddDetailsEntity.setAssetCurrency(obj[26]== null ? "" : obj[26].toString());
				objEddDetailsEntity.setLiabilities(obj[27]== null ? "" : obj[27].toString());
				objEddDetailsEntity.setLiabilitiesCurrency(obj[28]== null ? "" : obj[28].toString());
				//objEddDetailsEntity.setAccountEmbassyBusiness(obj[29]== null ? "" : obj[29].toString());
				objEddDetailsEntity.setAccountEmbassyFlag(obj[29]== null ? "" : obj[29].toString());
				objEddDetailsEntity.setLevelWealthCorrob(obj[30]== null ? "" : obj[30].toString());
				objEddDetailsEntity.setCorrobWealthDocType(obj[31]== null ? "" : obj[31].toString());
				objEddDetailsEntity.setCorrobWealthDoc(obj[32]== null ? "" : obj[32].toString());
				objEddDetailsEntity.setSrcCorrobWealth(obj[33]== null ? "" : obj[33].toString());
				objEddDetailsEntity.setRelationshipBalance(obj[34]== null ? "" : obj[34].toString());
				objEddDetailsEntity.setIsSPF(obj[35]== null ? "" : obj[35].toString());
				objEddDetailsEntity.setFirstName(obj[36]== null ? "" : obj[36].toString());
				objEddDetailsEntity.setLastName(obj[37]== null ? "" : obj[37].toString());
				objEddDetailsEntity.setCreatedBy(obj[38]== null ? "" : obj[38].toString());
				objEddDetailsEntity.setCreatedDt(obj[39]== null ? "" : obj[39].toString());
				objEddDetailsEntity.setEddVerNum(obj[40]== null ? "" : obj[40].toString());
				objEddDetailsEntity.setAttachmentId(obj[41]== null ? "" : obj[41].toString());
				objEddDetailsEntity.setAttachmentName(obj[42]== null ? "" : obj[42].toString());
		}
		logger.info("Exit getEddDetails for controlNumber" + controlNumber + "customerNumber:" + customerNumber);
		return objEddDetailsEntity;
	}
	
	public EddDetailsMerchantEntity getEddMerchantRetailEntityDetails(String controlNumber, String countryCode, String customerNumber,String clientType)
			throws ParseException {
		logger.info("Inside getEddDetails for controlNumber" + controlNumber + "customerNumber:" + customerNumber);
		Query query = getSession().createSQLQuery(EDD_RET_MERT_ENTITY_QUERY);
		query.setParameter("countryCode", countryCode);
		query.setParameter("controlNumber", controlNumber);
		query.setParameter("customerNumber", customerNumber);
		List<Object[]> eddDetailsList = query.list();
		logger.info("Inside getEddDetails  Query result Size"+ eddDetailsList.size());
		EddDetailsMerchantEntity objEddDetailsMerchantEntity = null;
		Iterator<Object[]> iterator = eddDetailsList.iterator();
		while (iterator.hasNext()) {
			Object[] obj = iterator.next();
				objEddDetailsMerchantEntity = new EddDetailsMerchantEntity();
				objEddDetailsMerchantEntity.setAnnlBusiRevenue(obj[0]== null ? "" : obj[0].toString());
				objEddDetailsMerchantEntity.setRevenueCurrency(obj[1]== null ? "" : obj[1].toString());
				objEddDetailsMerchantEntity.setClientSubstDiscr(obj[2]== null ? "" : obj[2].toString());
				objEddDetailsMerchantEntity.setClientSubstDiscrDetails(obj[3]== null ? "" : obj[3].toString());
				objEddDetailsMerchantEntity.setCntryPrimaryOpertions(obj[4]== null ? "" : obj[4].toString());
				objEddDetailsMerchantEntity.setPubliclyTraded(obj[5]== null ? "" : obj[5].toString());
				objEddDetailsMerchantEntity.setStockExchName(obj[6]== null ? "" : obj[6].toString());
				objEddDetailsMerchantEntity.setPercentPublicShares(obj[7]== null ? "" : obj[7].toString());
				// yet to decide
				objEddDetailsMerchantEntity.setIsParentPubliclyTraded(obj[8]== null ? "" : obj[8].toString());
				
				objEddDetailsMerchantEntity.setParentStockExhNm(obj[9]== null ? "" : obj[9].toString());
				
				objEddDetailsMerchantEntity.setNoOfLocations(obj[10]== null ? "" : obj[10].toString());
				
				objEddDetailsMerchantEntity.setHomeBasedBusi(obj[11]== null ? "" : obj[11].toString());
				objEddDetailsMerchantEntity.setSeedMoneySources(obj[12]== null ? "" : obj[12].toString());
				objEddDetailsMerchantEntity.setSeedMoneyAmt(obj[13]== null ? "" : obj[13].toString());
				objEddDetailsMerchantEntity.setSeedMoneyCurrency(obj[14]== null ? "" : obj[14].toString());
				objEddDetailsMerchantEntity.setSeedMoneyTiming(obj[15]== null ? "" : obj[15].toString());
				objEddDetailsMerchantEntity.setSignifRevenueSources(obj[16]== null ? "" : obj[16].toString());
				objEddDetailsMerchantEntity.setSignifRevenueAmt(obj[17]== null ? "" : obj[17].toString());
				objEddDetailsMerchantEntity.setSignifRevenueCurrency(obj[18]== null ? "" : obj[18].toString());
				objEddDetailsMerchantEntity.setSignifRevenueTiming(obj[19]== null ? "" : obj[19].toString());
				objEddDetailsMerchantEntity.setClientsReview(obj[20]== null ? "" : obj[20].toString());
				
				objEddDetailsMerchantEntity.setAmlPrgmRequired(obj[21]== null ? "" : obj[21].toString());
				objEddDetailsMerchantEntity.setPartOfTop200Law(obj[22]== null ? "" : obj[22].toString());
				objEddDetailsMerchantEntity.setDoClntPractlawHighRisk(obj[23]== null ? "" : obj[23].toString());
				
				objEddDetailsMerchantEntity.setNatureOfBusiness(obj[24]== null ? "" : obj[24].toString());
				
				objEddDetailsMerchantEntity.setIsClntInterBusiOnly(obj[25]== null ? "" : obj[25].toString());
				objEddDetailsMerchantEntity.setAboutUsWebPage(obj[26]== null ? "" : obj[26].toString());
				
				objEddDetailsMerchantEntity.setAddScreeningResult(obj[27]== null ? "" : obj[27].toString());
				objEddDetailsMerchantEntity.setSplPurposeVehicle(obj[28]== null ? "" : obj[28].toString());
				objEddDetailsMerchantEntity.setIsInternetGamblingBus(obj[29]== null ? "" : obj[29].toString());
				
				objEddDetailsMerchantEntity.setCitiAcccountCasinoTrans(obj[30]== null ? "" : obj[30].toString());
				objEddDetailsMerchantEntity.setIsOwnership3Yrs(obj[31]== null ? "" : obj[31].toString());
				objEddDetailsMerchantEntity.setOwnership3YrsDtls(obj[32]== null ? "" : obj[32].toString());
				objEddDetailsMerchantEntity.setChangeInClientBusi(obj[33]== null ? "" : obj[33].toString());
				objEddDetailsMerchantEntity.setChangeinClntBusiDetails(obj[34]== null ? "" : obj[34].toString());
				objEddDetailsMerchantEntity.setIsClientHoldingFund(obj[35]== null ? "" : obj[35].toString());
				
				objEddDetailsMerchantEntity.setIsClntHoldingOthrFincialRelship(obj[36]== null ? "" : obj[36].toString());
				objEddDetailsMerchantEntity.setNoOfEmployees(obj[37]== null ? "" : obj[37].toString());
				objEddDetailsMerchantEntity.setCallReportTxt(obj[38]== null ? "" : obj[38].toString());
				
				objEddDetailsMerchantEntity.setTargetClientDescription(obj[51]== null ? "" : obj[51].toString());
				objEddDetailsMerchantEntity.setClientAmlPrgm(obj[52]== null ? "" : obj[52].toString());
				objEddDetailsMerchantEntity.setClientAmlAudit(obj[53]== null ? "" : obj[53].toString());
				objEddDetailsMerchantEntity.setClientAmlCddDtls(obj[54]== null ? "" : obj[54].toString());
				
				objEddDetailsMerchantEntity.setClientAmlTransMonit(obj[55]== null ? "" : obj[55].toString());
				objEddDetailsMerchantEntity.setClientAmlNegNews(obj[56]== null ? "" : obj[56].toString());
				objEddDetailsMerchantEntity.setClientAmlBusiLines(obj[57]== null ? "" : obj[57].toString());
				
				objEddDetailsMerchantEntity.setClientAmlComments(obj[58]== null ? "" : obj[58].toString());
				objEddDetailsMerchantEntity.setClientIssueBearerShare(obj[59]== null ? "" : obj[59].toString());
				
				objEddDetailsMerchantEntity.setClntOutStandingBearerShare(obj[60]== null ? "" : obj[60].toString());
				objEddDetailsMerchantEntity.setCreatedBy(obj[61]== null ? "" : obj[61].toString());
				objEddDetailsMerchantEntity.setCreatedDt(obj[62]== null ? "" : obj[62].toString());
				objEddDetailsMerchantEntity.setEddVerNum(obj[63]== null ? "" : obj[63].toString());
				objEddDetailsMerchantEntity.setEddMapCustVerNum(obj[64]== null ? "" : obj[64].toString());
				objEddDetailsMerchantEntity.setEddMapCustId(obj[65]== null ? "" : obj[65].toString());
				objEddDetailsMerchantEntity.setEddMapSupplVerNum(obj[66]== null ? "" : obj[66].toString());
				objEddDetailsMerchantEntity.setEddMapSupplId(obj[67]== null ? "" : obj[67].toString());
				objEddDetailsMerchantEntity.setAttachmentId(obj[68]== null ? "" : obj[68].toString());
				objEddDetailsMerchantEntity.setAttachmentName(obj[69]== null ? "" : obj[69].toString());
		}
		logger.info("Exit getEddDetails for controlNumber" + controlNumber + "customerNumber:" + customerNumber);
		return objEddDetailsMerchantEntity;
	}
	
	@Override
	public ArrayList<EddMemberEntity> getEddEntityMemberDetails(String controlNumber, String countryCode,
			String customerNumber) throws ParseException, SQLException {
		logger.info("Inside getEddEntityMemberDetails for controlNumber" + controlNumber + "customerNumber:" + customerNumber);
		ArrayList<EddMemberEntity> listEDDMemberEntity = new ArrayList<EddMemberEntity>();
		Query query = getSession().createSQLQuery(EDD_RET_ENTITY_MEMBER_QUERY);
		query.setParameter("countryCode", countryCode);
		query.setParameter("controlNumber", controlNumber);
		query.setParameter("customerNumber", customerNumber);
		List<Object[]> memberList = query.list();
		if(memberList!= null && memberList.size() > 0) {
			logger.info(" member Size " + memberList.size());
			EddMemberEntity objEDDMemberEntity = null;
			Iterator<Object[]> iterator = memberList.iterator();
			while (iterator.hasNext()) {
				Object[] obj = iterator.next();
				objEDDMemberEntity = new EddMemberEntity();
				objEDDMemberEntity.setMemberName(obj[0]== null ? "" : obj[0].toString());
				objEDDMemberEntity.setAssocType(obj[1]== null ? "" : obj[1].toString());
				objEDDMemberEntity.setRelType(obj[2]== null ? "" : obj[2].toString());
				objEDDMemberEntity.setCntryResidence(obj[3]== null ? "" : obj[3].toString());
				objEDDMemberEntity.setPercentOwnership(obj[4]== null ? "" : obj[4].toString());
				objEDDMemberEntity.setLevelWealthCorrob(obj[5]== null ? "" : obj[5].toString());
				
				 long len;
				 String corrobwelth="";
				 if(obj[6]!=null)
				 {
				Clob notes = (Clob) obj[6];
				len = notes.length();
				 corrobwelth = notes.getSubString(1, (int) len);
				 }
				 objEDDMemberEntity.setCorrobWealth(corrobwelth== null ? "" : corrobwelth);
				objEDDMemberEntity.setMemberId(obj[7]== null ? "" : obj[7].toString());
				objEDDMemberEntity.setSourceOfWealth(obj[8]== null ? "" : obj[8].toString());
				objEDDMemberEntity.setCorrobWealthSrc(obj[9]== null ? "" : obj[9].toString());
				objEDDMemberEntity.setRiskRating(obj[10]== null ? "" : obj[10].toString());
				objEDDMemberEntity.setNationality(obj[11]== null ? "" : obj[11].toString());
				objEDDMemberEntity.setRegCountry(obj[12]== null ? "" : obj[12].toString());
				objEDDMemberEntity.setMemberUBOId(obj[13]== null ? "" : obj[13].toString());
				objEDDMemberEntity.setMemberUboVerNum(obj[14]== null ? "" : obj[14].toString());
				objEDDMemberEntity.setAttachmentId(obj[15]== null ? "" : obj[15].toString());
				objEDDMemberEntity.setAttachmentName(obj[16]== null ? "" : obj[16].toString());
				objEDDMemberEntity.setMemberCustomerNbr(obj[17]== null ? "" : obj[17].toString());
				objEDDMemberEntity.setCustomerName(obj[18]== null ? "" : obj[18].toString());
				listEDDMemberEntity.add(objEDDMemberEntity);
			}
			logger.info("Exit getEddMemberDetails for controlNumber" + controlNumber + "customerNumber:" + customerNumber+" Output List size"+listEDDMemberEntity.size());
		}
		return listEDDMemberEntity;
	}
	
	@Override
	public ArrayList<String> getHighRiskCountiresList() throws ParseException {
		logger.info("Inside getHighRiskCountiresList method " );
		ArrayList<String> countryResultList = new ArrayList<String>();
		Query query = getSession().createSQLQuery(HIGH_RISK_COUNTRIES_LIST/*PICK_LIST_HIGH_RISK_COUNTRIES*/);
		List<Object> countryList = query.list();
		if(countryList != null && countryList.size() > 0) {
			logger.info(" Country List Size " + countryList.size());
			Iterator<Object> iterator = countryList.iterator();
			while (iterator.hasNext()) {
				Object obj = iterator.next();
				countryResultList.add(obj== null ? "" : obj.toString());
			}
		}
		logger.info("Exit getHighRiskCountiresList ");
		return countryResultList;
	}
	
	public HashMap<String, String> getRelTypePickListValues() throws ParseException {
		logger.info("Inside getRelTypePickListValues method " );
		HashMap<String, String> relTypeMap = new HashMap<String, String>();
		Query query = getSession().createSQLQuery(PICK_LIST_RELATIONSHIP_TYPE);
		List<Object[]> relTypeList = query.list();
		if(relTypeList != null && relTypeList.size() > 0) {
			logger.info(" No of rows fetched : " + relTypeList.size());
			Iterator<Object[]> iterator = relTypeList.iterator();
			while (iterator.hasNext()) {
				Object[] obj = iterator.next();
				relTypeMap.put(obj[0]== null ? "" : obj[0].toString(),obj[1]== null ? "" : obj[1].toString());
			}
		}
		logger.info("Exit getRelTypePickListValues ");
		return relTypeMap;
	}
	
	public HashMap<String, String> getAsscnTypePickListValues() throws ParseException {
		logger.info("Inside getAsscnTypePickListValues method " );
		HashMap<String, String> asscnTypeMap = new HashMap<String, String>();
		Query query = getSession().createSQLQuery(PICK_LIST_ASSOCIATION_TYPE);
		List<Object[]> asscnTypeList = query.list();
		if(asscnTypeList != null && asscnTypeList.size() > 0) {
			logger.info(" No of rows fetched : " + asscnTypeList.size());
			Iterator<Object[]> iterator = asscnTypeList.iterator();
			while (iterator.hasNext()) {
				Object[] obj = iterator.next();
				asscnTypeMap.put(obj[0]== null ? "" : obj[0].toString(),obj[1]== null ? "" : obj[1].toString());
			}
		}
		logger.info("Exit getAsscnTypePickListValues ");
		return asscnTypeMap;
	}
	
	
	public void saveEddDetails(KycEddEntity kycEddEntity) {
		logger.info("Invoking Hibernate Query to Save/Update Edd Details for CDD : "+kycEddEntity.getControlNbr());
		saveObject(kycEddEntity);
		logger.info("Saved Sucessfully the Edd Details using Hibernate Query for CDD : "+kycEddEntity.getControlNbr());
	}
	
	public void updateEddDetails(KycEddEntity kycEddEntity) {
		logger.info("Invoking Hibernate Query to Save/Update Edd Details for CDD : "+kycEddEntity.getControlNbr());
		mergeObject(kycEddEntity/*kycEddEntityPersist*/);
		logger.info("Updated Sucessfully the Edd Details using Hibernate Query for CDD : "+kycEddEntity.getControlNbr());
	}
	
	
	
	@Override
	public void updateCorrobDetatils(EddVO objEddVO) {
		logger.info("Invoking updateCorrobDetatils to Save/Update Edd KycEdd");
		Query query = getSession().createQuery(
				"update KycEddEntity edd set edd.srcCorrbWealth=:srcCorrWealth where controlNbr=:cddNumber AND customerNbr=:customerNo AND cntryCde=:countryCode");
				
		try {
			query.setString("srcCorrWealth",Hibernate.getLobCreator(getSession()).createClob("srccorrob345").getSubString(1L,"srccorrob345".length()));
		
		query.setString("cddNumber", objEddVO.getCddControlNumber());
		query.setString("customerNo", objEddVO.getCustNumber());
		query.setString("countryCode", objEddVO.getCountry());
		int result =query.executeUpdate();
		logger.info("Exit updateCorrobDetatils to Save/Update Edd KycEddEntity");
		} catch (SQLException e) {
			logger.info("Exit updateCorrobDetatils to Save/Update Edd KycEddEntity"+e.getMessage());
			}
	}
	
	public void updateEddMemberDetails(KycMemberIdentificationEntity kycMemberIdentificationEntity){
		logger.info("Invoking saveEddMemberDetails to Save/Update Edd KycMemberIdentificationEntity");
		saveOrUpdateObject(kycMemberIdentificationEntity);
	}
	
	public void updateEddCustomerDetails(KycCustomerDetailsIdentEntity kycCustomerDetailsIdentEntity){
		logger.info("Invoking saveEddMemberDetails to Save/Update Edd KycCustomerDetailsIdentEntity");
		saveOrUpdateObject(kycCustomerDetailsIdentEntity);
	}
	
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.forms.edd.dao.IEddDao#saveSpfAddendumEntityDetails(com.citigroup.amlcdd.forms.entity.MemberSpfAddendumEntity)
	 */
	@Override
	public void saveSpfAddendumEntityDetails(MemberSpfAddendumEntity kycEddEntity) throws ParseException {
		logger.info("Invoking saveSpfAddendumEntityDetails to Save/Update Edd MemberSpfAddendumEntity");
		saveOrUpdateObject(kycEddEntity);
	}

	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.forms.edd.dao.IEddDao#saveOtherEmploymentFieldCustomerDetailsEntity(com.citigroup.amlcdd.entity.KYCCustomerDetailsEntity)
	 */
	//@Override
	public void saveOtherEmploymentFieldCustomerDetailsEntity(KYCCustomerDetailsEntity kycCustomerDetailsEntity)
			throws ParseException {
		logger.info("Invoking saveOtherEmploymentFieldCustomerDetailsEntity to Save/Update Edd KycCustomerDetails");
		Query query = getSession().createQuery("from KYCCustomerDetailsEntity where controlNbr=:cddNumber AND customerNbr=:customerNo AND cntryCde=:countryCode"); 
		query.setString("cddNumber", kycCustomerDetailsEntity.getControlNbr());
		query.setString("customerNo", kycCustomerDetailsEntity.getCustomerNbr());
		query.setString("countryCode", kycCustomerDetailsEntity.getCntryCde());
		KYCCustomerDetailsEntity existinKYCCustomerDetailsEntity=(KYCCustomerDetailsEntity)query.list().get(0);
		existinKYCCustomerDetailsEntity.setOtherTypeOfEmployment(kycCustomerDetailsEntity.getOtherTypeOfEmployment());
		saveOrUpdateObject(existinKYCCustomerDetailsEntity);
	}
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.forms.edd.dao.IEddDao#getAttachment(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
	 */
	@Override
	public List<KycAttachmentEntity> getAttachment(String customerNbr, String controlNbr, String country, String sectionNm) {
		logger.info("Inside getEddDetails for controlNumber" + controlNbr + "customerNumber:" + customerNbr);
		Criteria cr = getSession().createCriteria(KycAttachmentEntity.class);	
		cr.add(Restrictions.eq("controlNbr", controlNbr));
		cr.add(Restrictions.eq("sectionNm","EDD"));
		cr.add(Restrictions.eq(AMLCDDConstants.COMPONENT_ID,sectionNm));
		cr.add(Restrictions.eq(AMLCDDConstants.ATACH_REMARKS,"EDD"));
		if(StringUtils.hasText(customerNbr)){
			cr.add(Restrictions.eq("customerNbr",customerNbr));
		}
		cr.addOrder(Order.desc("createdDt"));
		
		ProjectionList p1=Projections.projectionList();
        p1.add(Projections.property("atchId"));
        p1.add(Projections.property("controlNbr")); 
        p1.add(Projections.property("sectionNm"));
        p1.add(Projections.property("atchNm"));
        cr.setProjection(p1);
        List<Object> queryList =  cr.list();
        List<KycAttachmentEntity> kycAttachmentEntityList = new ArrayList<>();
        KycAttachmentEntity attachment = new KycAttachmentEntity();
        if(queryList!=null && !queryList.isEmpty() && queryList.size()>0 && queryList.get(0)!=null ){
        	Object [] objList = (Object[])queryList.get(0);
			attachment.setAtchId((String) objList[0]);
			attachment.setControlNbr((String) objList[1]);
			attachment.setSectionNm((String) objList[2]);
			attachment.setAtchNm((String) objList[3]);
			kycAttachmentEntityList.add(attachment);
        }
        
		return kycAttachmentEntityList;
		}
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.forms.edd.dao.IEddDao#getSowDetails(java.lang.String, java.lang.String)
	 */
	@Override
	public List<KycSourceOfWealthEntity> getEddSowDetails(String cddNumber, String countryCode) {
		logger.info("Invoking Hibernate Query to retrive EDD SOW Details for CDD : " + cddNumber);
		Query query = getSession().createQuery(
				"from KycSourceOfWealthEntity where controlNbr = :cddNumber and cntryCde = :countryCode and (recordSts is null or recordSts != :recordStatus)");
		query.setString("cddNumber", cddNumber);
		query.setString("countryCode", countryCode);
		query.setString("recordStatus", AMLCDDConstants.IN_ACTIVE); // to be handled with SUCCESS or NULL check
		List<KycSourceOfWealthEntity> kycSourceOfWealthEntities = (List<KycSourceOfWealthEntity>) query.list();
		logger.info("Fetched EDD SOW Details using Hibernate Query for CDD : " + cddNumber);
		return kycSourceOfWealthEntities;
	}
	public void saveSowDetails(KycSourceOfWealthEntity kycSourceOfWealthEntities) {
		logger.info("Invoking Hibernate Query to Save/Update EDD SOW Details for CDD : "
				+ kycSourceOfWealthEntities.getControlNbr());
		if (AMLCDDConstants.SAVE_UPDATE.equals(kycSourceOfWealthEntities.getOperation())) {
			kycSourceOfWealthEntities.setRecordSts(AMLCDDConstants.ACTIVE);
				saveOrUpdateObject(kycSourceOfWealthEntities);
		} else if (AMLCDDConstants.DELETE.equals(kycSourceOfWealthEntities.getOperation())) {
			kycSourceOfWealthEntities.setRecordSts(AMLCDDConstants.IN_ACTIVE);
			deleteObject(kycSourceOfWealthEntities);
		}
		logger.info("Saved Sucessfully the EDD SOW Details using Hibernate Query for CDD : "
				+ kycSourceOfWealthEntities.getControlNbr());
	}
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.forms.edd.dao.IEddDao#saveOtherEmploymentFieldCustomerDetailsEntity(com.citigroup.amlcdd.forms.edd.vo.EddVO)
	 */
	@Override
	public void saveOtherEmploymentFieldCustomerDetailsEntity(EddVO objEddVO) throws ParseException {

		logger.info("Invoking saveOtherEmploymentFieldCustomerDetailsEntity to Save/Update Edd KycCustomerDetails");
		Query query = getSession().createQuery(
				"update KYCCustomerDetailsEntity set otherTypeOfEmployment=:otherEmp where controlNbr=:cddNumber AND customerNbr=:customerNo AND cntryCde=:countryCode");//and recordSts = :recordStatus to be added
				
		query.setString("otherEmp", objEddVO.getObjEddDetailsVO().getOtherEmploymentType());
		query.setString("cddNumber", objEddVO.getCddControlNumber());
		query.setString("customerNo", objEddVO.getCustNumber());
		query.setString("countryCode", objEddVO.getCountry());
		int result =query.executeUpdate();
		logger.info("Exit saveOtherEmploymentFieldCustomerDetailsEntity to Save/Update Edd KycCustomerDetails");
	
		
	}
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.forms.edd.dao.IEddDao#updateEddCustomerDetails(com.citigroup.amlcdd.forms.edd.vo.EddVO, com.citigroup.amlcdd.forms.edd.vo.EddMemberVO)
	 */
	@Override
	public void updateEddCustomerDetails(EddVO objEddVO, EddMemberVO eddMemberVO) {
		logger.info("Invoking saveEddMemberDetails to Save/Update Edd KycCustomerDetailsIdentEntity");
		Query query = getSession().createQuery(
				"update KycCustomerDetailsIdentEntity set idCntry=:idCountry where id.controlNbr=:cddNumber "
				+ " AND id.customerNbr=:customerNo AND id.cntryCde=:countryCode AND id.idType=:memIdType");//and recordSts = :recordStatus to be added
				
		query.setString("idCountry", eddMemberVO.getIdCountry());
		query.setString("cddNumber", objEddVO.getCddControlNumber());
		query.setString("customerNo", eddMemberVO.getCustomerNbr());
		query.setString("countryCode", objEddVO.getCountry());
		query.setString("memIdType", eddMemberVO.getCddIdType());
		int result =query.executeUpdate();
		logger.info("Exit saveOtherEmploymentFieldCustomerDetailsEntity to Save/Update Edd KycCustomerDetails");
		
	}
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.forms.edd.dao.IEddDao#updateEddMemberDetails(com.citigroup.amlcdd.forms.edd.vo.EddVO, com.citigroup.amlcdd.forms.edd.vo.EddMemberVO)
	 */
	@Override
	public void updateEddMemberDetails(EddVO objEddVO, EddMemberVO eddMemberVO) {
			logger.info("Invoking saveEddMemberDetails to Save/Update Edd KycMemberIdentificationEntity");
			Query query = getSession().createQuery(
					"update KycMemberIdentificationEntity set idCntry=:idCountry where id.controlNbr=:cddNumber"
					+ " AND id.memberId=:membrId AND id.idType=:memIdType "
					+ " AND memberCntryCode=:countryCode");//and recordSts = :recordStatus to be added
					
			query.setString("idCountry", eddMemberVO.getIdCountry());
			query.setString("cddNumber", objEddVO.getCddControlNumber());
			query.setString("membrId", eddMemberVO.getMemberId());
			query.setString("countryCode", objEddVO.getCountry());
			query.setString("memIdType", eddMemberVO.getCddIdType());
			int result =query.executeUpdate();
			logger.info("Exit saveOtherEmploymentFieldCustomerDetailsEntity to Save/Update Edd KycCustomerDetails");
	}
	
	// for Entity Types
	@Override
	public String saveEddMapingDetailsForEntityType(KycEddMapEntity kycEddMapEntity) {
		logger.info("Invoking Hibernate Query to Save Edd Mapping Details for CDD : "+kycEddMapEntity.getControlNbr());
		kycEddMapEntity.setLbqMapId(getSequenceNo(AMLCDDConstants.SEQ_LBQMAP));
		saveObject(kycEddMapEntity);
		String lbqId=kycEddMapEntity.getLbqMapId();
		logger.info("Saved Sucessfully the Edd Mapping Details using Hibernate Query for CDD : "+kycEddMapEntity.getControlNbr());
		return lbqId;
	}
	
	
	
	@Override
	public void updateEddMapingDetailsForEntityType(KycEddMapEntity kycEddMapEntity) {
		logger.info("Invoking Hibernate Query to Update Edd Mapping Details for CDD : "+kycEddMapEntity.getControlNbr());
		updateObject(kycEddMapEntity);
		logger.info("Updated Sucessfully the Edd Mapping Details using Hibernate Query for CDD : "+kycEddMapEntity.getControlNbr());
	}
	
	@Override
	public void updateEddMapingDetailsForEntity(KycEddMapDtlsVO kycEddMapDtlsVO) {
		logger.info("Invoking Hibernate Query to Update Edd Mapping Details for CDD : "+kycEddMapDtlsVO.getControlNbr());
		Query query = getSession().createQuery(
				"update KycEddMapEntity eddMap set eddMap.mapVal=:mapValue,eddMap.entityName=:entName,eddMap.ctry=:country,eddMap.firstName=:fName,eddMap.midName=:mName,eddMap.lastName=:lName,"
				+ "eddMap.donorName=:donName,eddMap.fundsProvided=:fund,eddMap.cntryOfResidence=:ctryResidence"
				+ " where controlNbr=:cddNumber AND customerNbr=:customerNo AND cntryCde=:countryCode AND eddMap.lbqMapId=:lbMapId");
		
		query.setString("mapValue", kycEddMapDtlsVO.getMapVal());		
		query.setString("entName", kycEddMapDtlsVO.getEntityName());
		query.setString("country", kycEddMapDtlsVO.getCtry());
		query.setString("fName", kycEddMapDtlsVO.getFirstName());
		query.setString("mName", kycEddMapDtlsVO.getMidName());
		query.setString("lName", kycEddMapDtlsVO.getLastName());
		query.setString("donName", kycEddMapDtlsVO.getDonorName());
		query.setString("fund", kycEddMapDtlsVO.getFundsProvided());
		query.setString("ctryResidence", kycEddMapDtlsVO.getCntryOfResidence());
		query.setString("lbMapId",kycEddMapDtlsVO.getLbqMapId());
		query.setString("cddNumber", kycEddMapDtlsVO.getCddControlNumber());
		query.setString("customerNo", kycEddMapDtlsVO.getCustNumber());
		query.setString("countryCode", kycEddMapDtlsVO.getCountry());
		int result =query.executeUpdate();
		logger.info("Updated Sucessfully the Edd Mapping Details using Hibernate Query for CDD : "+kycEddMapDtlsVO.getControlNbr());
	}
	
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.forms.edd.dao.IEddDao#saveOtherEmploymentFieldCustomerDetailsEntity(com.citigroup.amlcdd.forms.edd.vo.EddVO)
	 */
	@Override
	public void saveEddCustomerDetailsforEntityType(EddVO objEddVO) throws ParseException {

		logger.info("Invoking saveOtherEmploymentFieldCustomerDetailsEntity to Save/Update Edd KycCustomerDetails");
		Query query = getSession().createQuery(
				"update KYCCustomerDetailsEntity cust set cust.citiAcctGambleCasinoTxn=:accountTrans where controlNbr=:cddNumber AND customerNbr=:customerNo AND cntryCde=:countryCode");
				
		query.setString("accountTrans", objEddVO.getObjEddEntityDetailsVO().getIsClientUseCitiaccGam());
		query.setString("cddNumber", objEddVO.getCddControlNumber());
		query.setString("customerNo", objEddVO.getCustNumber());
		query.setString("countryCode", objEddVO.getCountry());
		int result =query.executeUpdate();
		logger.info("Exit saveEddCustomerDetailsforEntityType to Save/Update Edd KycCustomerDetails");
	}


	@Override
	public List<KycEddMapEntity> getEddMappingDetails(String cddControlNumber, String country, String custNumber) {

		logger.info("Inside the class EddDaoImpl---> method :findAllEddDetails for countryCode:"+ country+ "-" + "controlNumber:"+ country+"-"+"customerNumber:"+country);
//			query = getSession().createSQLQuery(EDD_MAPPING_RET_MERT_QUERY);
		Query query=getSession().getNamedQuery("KycEddMapEntity.findByMapTYpe");
		query.setParameter("controlNbr", cddControlNumber);
		query.setParameter("customerNbr", custNumber);
		query.setParameter("cntryCde", country);
//		query.setParameter("mapList", mapTypeList);
		query.setParameterList("mapList", mapTypeList);
		List<KycEddMapEntity> eddMappingDtlsList=query.list();
		/*KycEddMapEntity kycEddMapEntity=null;
		if(eddMappingDtlsList!=null && eddMappingDtlsList.size()>0){
		kycEddMapEntity=(KycEddMapEntity) eddMappingDtlsList.get(0);
		
		}*/
		logger.info("Exits the class EddDaoImpl---> method : findAllEddDetails");
		return eddMappingDtlsList;
		
	
		
		
	}

	@Override
	public void deleteEddmappingDetails(List<String> deleteEddMapIds) {
		logger.info("Invoking deleteEddmappingDetails to Save/Update Edd KycEddMapEntity");
		logger.info("Inside the Class: CddUploadDaoImpl ---> method: deleteUploadDocument ");
		if(deleteEddMapIds.size() > 0) {
			Query query = getSession().createQuery(DELETE_EDDMAP_QUERY);
			query.setParameterList(AMLCDDConstants.EDD_MAP_IDS, deleteEddMapIds);
			query.executeUpdate();
		}
		logger.info("Exit deleteEddmappingDetails to Save/Update Edd KycEddMapEntity");
	}
	
	@Override
	public void deleteEddmappingDetailsByMapType(EddVO objEddVO,String mapType,List<String> deleteMapval) {
		logger.info("Invoking deleteEddmappingDetailsByMapType to Save/Update Edd KycEddMapEntity");
		logger.info("Inside the Class: CddUploadDaoImpl ---> method: deleteUploadDocument ");
			Query query = getSession().createQuery(DELETE_EDDMAP_BYTYPE_QUERY);
			query.setParameter("controlNbr", objEddVO.getCddControlNumber());
			query.setParameter("customerNbr", objEddVO.getCustNumber());
			query.setParameter("cntryCde", objEddVO.getCountry());
			query.setParameter("mapType", mapType);
			query.setParameterList("mapVal", deleteMapval);
			query.executeUpdate();
		logger.info("Exit deleteEddmappingDetails to Save/Update Edd KycEddMapEntity");
	}
	@SuppressWarnings("unchecked")
	@Override
	public KycEddMapEntity getEddMapByMapId(KycEddMapDtlsVO kycEddMapDtlsVO) {
		logger.info("Inside the class EddDaoImpl---> method :findAllEddDetails for countryCode:"+ kycEddMapDtlsVO.getCntryCde()+ "-" + "controlNumber:"+ kycEddMapDtlsVO.getCddControlNumber()+"-"+"customerNumber:"+kycEddMapDtlsVO.getCustNumber());
		Query query=null;
			query = getSession().createSQLQuery(EDD_MAPPING_RET_MERT_QUERY);
//		Query query=getSession().getNamedQuery("KycEddMapEntity.findByMapTYpe");
		query.setParameter("controlNumber", kycEddMapDtlsVO.getCddControlNumber());
		query.setParameter("customerNumber", kycEddMapDtlsVO.getCustNumber());
		query.setParameter("countryCode", kycEddMapDtlsVO.getCountry());
		query.setParameter("mapSeqId", kycEddMapDtlsVO.getLbqMapId());
		
		
		List<Object[]> eddMappingDtlsList = query.list();
		KycEddMapEntity kycEddMapEntity=new KycEddMapEntity();
		if(eddMappingDtlsList!= null && eddMappingDtlsList.size() > 0) {
			logger.info(" member Size " + eddMappingDtlsList.size());
			EddMemberEntity objEDDMemberEntity = null;
			Iterator<Object[]> iterator = eddMappingDtlsList.iterator();
			while (iterator.hasNext()) {
				Object[] obj = iterator.next();
				kycEddMapDtlsVO.setMapVal(obj[0]== null ? "" : obj[0].toString());
				kycEddMapDtlsVO.setCtry(obj[1]== null ? "" : obj[1].toString());
				kycEddMapDtlsVO.setEntityName(obj[2]== null ? "" : obj[2].toString());
				kycEddMapDtlsVO.setFirstName(obj[3]== null ? "" : obj[3].toString());
				kycEddMapDtlsVO.setMidName(obj[4]== null ? "" : obj[4].toString());
				kycEddMapDtlsVO.setLastName(obj[5]== null ? "" : obj[5].toString());
				kycEddMapDtlsVO.setMapType(obj[6]== null ? "" : obj[6].toString());
				kycEddMapDtlsVO.setDonorName(obj[7]== null ? "" : obj[7].toString());
				kycEddMapDtlsVO.setFundsProvided(obj[8]== null ? "" : obj[8].toString());
				kycEddMapDtlsVO.setCntryOfResidence(obj[9]== null ? "" : obj[9].toString());
			}
		}
		
		logger.info("Exits the class EddDaoImpl---> method : findAllEddDetails");
		return kycEddMapEntity;
	}
	
	@Override
	public void saveCustomerDetailsEntity(EddVO objEddVO) {

		logger.info("Invoking saveCustomerDetailsEntity to Save/Update Edd KycCustomerDetails");
		Query query = getSession().createQuery(
				"update KYCCustomerDetailsEntity set accountEmbassyFlag=:accountEmbassyFlag where controlNbr=:cddNumber AND customerNbr=:customerNo AND cntryCde=:countryCode");//and recordSts = :recordStatus to be added
				
		query.setString("accountEmbassyFlag", objEddVO.getObjEddDetailsVO().getAccountEmbassyBusiness());
		query.setString("cddNumber", objEddVO.getCddControlNumber());
		query.setString("customerNo", objEddVO.getCustNumber());
		query.setString("countryCode", objEddVO.getCountry());
		int result =query.executeUpdate();
		logger.info("Exit saveCustomerDetailsEntity to Save/Update Edd KycCustomerDetails");
		
	
	}
	
	@Override
	public void updateEddMemberDetailsIdentFields(EddVO objEddVO, EddMemberVO eddMemberVO) {
		logger.info("Invoking updateEddMemberDetailsIdentFields to Save/Update Edd KycMemberDetails");
		Query query = getSession().createSQLQuery(UPDATE_MEMBER_DETAILS_QUERY);	
		query.setParameter("controlNumber", objEddVO.getCddControlNumber());
		query.setParameter("membrId", eddMemberVO.getMemberId());
		query.setParameter("countryCode", objEddVO.getCountry());
		query.setParameter("customerNumber", eddMemberVO.getCustomerNbr());
		query.setParameter("cddIdType", eddMemberVO.getCddIdType());
		query.setParameter("cddPhotoIdType", eddMemberVO.getCddPhotoIdType());
		int result =query.executeUpdate();
		logger.info("Exit updateEddMemberDetailsIdentFields to Save/Update Edd KycMemberDetails");

	}

	@Override
	public void saveEddDetails(KycEddEntity kycEddEntity, EddVO objEddVO) throws ParseException {

		logger.info("Invoking Hibernate Query to Save/Update Edd Details for CDD : "+kycEddEntity.getControlNbr());
		logger.info("Inside EddDaoImpl saveEddDetails for Control Number " + objEddVO.getCddControlNumber()+ "Audit Details:" + kycEddEntity.getClientAmlAudit());
		logger.info("Inside EddDaoImpl saveEddDetails for Control Number " + objEddVO.getCddControlNumber()+ "Aml Prgram Dtls:" +kycEddEntity.getClientAmlProgram());
		saveObject(kycEddEntity);
		logger.info("Saved Sucessfully the Edd Details using Hibernate Query for CDD : "+kycEddEntity.getControlNbr());
	}

	@Override
	public void updateEddDetails(KycEddEntity kycEddEntity, EddVO objEddVO) throws ParseException {

		logger.info("Invoking Hibernate Query to Save/Update Edd Details for CDD : "+kycEddEntity.getControlNbr());
		logger.info("Inside EddDaoImpl updateEddDetails for Control Number " + objEddVO.getCddControlNumber()+ "Audit Details:" + kycEddEntity.getClientAmlAudit());
		logger.info("Inside EddDaoImpl updateEddDetails for Control Number " + objEddVO.getCddControlNumber()+ "Aml Prgram Dtls:" +kycEddEntity.getClientAmlProgram());
		updateObject(kycEddEntity);
		logger.info("Updated Sucessfully the Edd Details using Hibernate Query for CDD : "+kycEddEntity.getControlNbr());
	
		
	}

	@Override
	public Map<String, List<EddMemberVO>> getIdTypesForCustomer(String cddControlNumber, String custNumber,
			String country) {
		Map<String, List<EddMemberVO>> idTypeMap = new HashMap<String, List<EddMemberVO>>();
		Query query = getSession().createSQLQuery(CUSTOMER_IDTYPE_QUERY);
		query.setParameter("countryCode", country);
		query.setParameter("customerNumber", custNumber);
		query.setParameter("controlNumber", cddControlNumber);
		List<Object[]> idTypes = query.list();
		if(idTypes!= null && idTypes.size() > 0) {
			logger.info(" idTypes Size " + idTypes.size());
			EddMemberVO eddMemberVO = null;
			List<EddMemberVO> lstIdTypeCustEddMemberVO = new ArrayList<EddMemberVO>();
			Iterator<Object[]> iterator = idTypes.iterator();
			while (iterator.hasNext()) {
				Object[] obj = iterator.next();
				eddMemberVO = new EddMemberVO();
				eddMemberVO.setCustomerNbr(custNumber);
				eddMemberVO.setIdType((obj[0]== null ? "" : obj[0].toString()));
				eddMemberVO.setIdNumber((obj[1]== null ? "" : obj[1].toString()));
				eddMemberVO.setIdDescription(((obj[2]== null ? (obj[0]== null ? "" : obj[0].toString()) : obj[2].toString())));
				if(idTypeMap.containsKey(eddMemberVO.getCustomerNbr())) {
					lstIdTypeCustEddMemberVO = idTypeMap.get(eddMemberVO.getCustomerNbr());
					lstIdTypeCustEddMemberVO.add(eddMemberVO);
				} else {
					lstIdTypeCustEddMemberVO.add(eddMemberVO);
				}
				idTypeMap.put(eddMemberVO.getCustomerNbr(), lstIdTypeCustEddMemberVO);
	        }
		}
		return idTypeMap;	
	}


	@Override
	public Map<String, List<EddMemberVO>> getIdTypesForMember(String cddControlNumber, String custNumber,
			String country) {
		Map<String, List<EddMemberVO>> idTypeMap = new HashMap<String, List<EddMemberVO>>();
		Query query = getSession().createSQLQuery(MEMBER_IDTYPE_QUERY);
		query.setParameter("countryCode", country);
		//query.setParameter("customerNumber", custNumber);
		query.setParameter("controlNumber", cddControlNumber);
		List<Object[]> idTypes = query.list();
		if(idTypes!= null && idTypes.size() > 0) {
			logger.info(" idTypes Size " + idTypes.size());
			EddMemberVO eddMemberVO = null;
			List<EddMemberVO> lstIdTypeEddMemberVO = new ArrayList<EddMemberVO>();
			Iterator<Object[]> iterator = idTypes.iterator();
			while (iterator.hasNext()) {
				Object[] obj = iterator.next();
				eddMemberVO = new EddMemberVO();
				eddMemberVO.setMemberId((obj[0]== null ? "" : obj[0].toString()));
				eddMemberVO.setIdType((obj[1]== null ? "" : obj[1].toString()));
				eddMemberVO.setIdNumber((obj[2]== null ? "" : obj[2].toString()));
				eddMemberVO.setIdDescription(((obj[3]== null ? (obj[1]== null ? "" : obj[1].toString()) : obj[3].toString())));

				if(idTypeMap.containsKey(eddMemberVO.getMemberId())){
					List<EddMemberVO> memIdLst = idTypeMap.get(eddMemberVO.getMemberId());
					memIdLst.add(eddMemberVO);
					idTypeMap.put(eddMemberVO.getMemberId(), memIdLst); 
				} else {
					List<EddMemberVO> memIdLst = new ArrayList<EddMemberVO>();
					memIdLst.add(eddMemberVO);
					idTypeMap.put(eddMemberVO.getMemberId(), memIdLst);
				}
	        }
	}
		return idTypeMap;

	}

	@Override
	public void updateEddCustomerDetailsIdentFields(EddVO objEddVO, EddMemberVO eddMemberVO) {
		
		logger.info("Invoking updateEddCustomerDetailsIdentFields to Save/Update Edd KycCustomerDetails");
		Query query = getSession().createQuery(
				"update KYCCustomerDetailsEntity set cddIdType=:cddIdType, cddPhotoIdType=:cddPhotoIdType  where controlNbr=:cddNumber "
				+ " AND customerNbr=:customerNo AND cntryCde=:countryCode ");//and recordSts = :recordStatus to be added
				
		query.setString("cddNumber", objEddVO.getCddControlNumber());
		query.setString("customerNo", eddMemberVO.getCustomerNbr());
		query.setString("countryCode", objEddVO.getCountry());
		query.setParameter("cddIdType", eddMemberVO.getCddIdType());
		query.setParameter("cddPhotoIdType", eddMemberVO.getCddPhotoIdType());
		int result =query.executeUpdate();
		logger.info("Exit updateEddCustomerDetailsIdentFields to Save/Update Edd KycCustomerDetails");
		
	}
	public void saveEddRetailEntityUBO(KycMemberUBODetailsEntity kycMemberUBODetailsEntity){

		
		if(CommonUtility.isNull(kycMemberUBODetailsEntity.getMemberUBOID())){
		kycMemberUBODetailsEntity.setMemberUBOID(getSequenceNo(AMLCDDConstants.SEQ_NAME_MEM));
		saveObject(kycMemberUBODetailsEntity);
		}
		else{
		updateObject(kycMemberUBODetailsEntity);
		}
	}
	
	@Override
	public void getNonFormDetails(EddVO objEddVO){
		logger.info("Invoking getNonFormDetails from  KycCustomerDetails");
		Query query = getSession().createSQLQuery(NON_FORM_QUERY);
		query.setParameter("countryCode", objEddVO.getCountry());
		query.setParameter("customerNumber", objEddVO.getCustNumber());
		query.setParameter("controlNumber", objEddVO.getCddControlNumber());
		List<Object[]> nonFormDetails = query.list();
		if(nonFormDetails!= null && nonFormDetails.size() > 0) {
			logger.info(" idTypes Size " + nonFormDetails.size());
			Object[] obj=(Object[]) query.list().get(0);
			objEddVO.getObjEddEntityDetailsVO().setCustSiccode(obj[1]== null ? "" : obj[1].toString());
			/*if(CommonUtility.getDifferenceInYears((Date)obj[0])<3){
			objEddVO.getObjEddEntityDetailsVO().setIncorporatedDate(AMLCDDConstants.Y);
			}
			else{
				objEddVO.getObjEddEntityDetailsVO().setIncorporatedDate(AMLCDDConstants.N);
			}*/
			Date currentDate=new Date();
			if(CommonUtility.getYearsBetweenDates((Date)obj[0],currentDate)<3){
				objEddVO.getObjEddEntityDetailsVO().setIncorporatedDate(AMLCDDConstants.Y);
				}
				else{
					objEddVO.getObjEddEntityDetailsVO().setIncorporatedDate(AMLCDDConstants.N);
				}
		}
	}


	@Override
	public void updateDueDiligenceMap(KycEddMapEntity entity) {
		KycEddMapEntity eddMapEntity = (KycEddMapEntity) getSession().get(KycEddMapEntity.class, entity.getLbqMapId());
		eddMapEntity.setMapVal(entity.getMapVal());
		eddMapEntity.setModifiedDt(entity.getModifiedDt());
		eddMapEntity.setModifiedBy(entity.getModifiedBy());
		updateObject(eddMapEntity);
	}
	
	
	
	@Override
	public void saveEddEntityUBOMapping(KycMemberUBOMapEntity kycMemberUBOEntity) {
		kycMemberUBOEntity.setMemberUBOMapId(getSequenceNo(AMLCDDConstants.SEQ_UBO_MAP));
		saveObject(kycMemberUBOEntity);
	}

	@Override
	public void deleteEddUBOMappingByMapType(String memberUboId,List<String> deleteList,String mapType) {
		logger.info("Invoking deleteEddmappingDetailsByMapType to Save/Update Edd KycEddMapEntity");
		logger.info("Inside the Class: CddUploadDaoImpl ---> method: deleteUploadDocument ");
			Query query = getSession().createQuery(DELETE_UBOMAP_BYTYPE_QUERY);
			query.setParameter("memUBOId", memberUboId);
			query.setParameterList("mapVal", deleteList);
			query.setParameter("mapType", mapType);
			query.executeUpdate();
		logger.info("Exit deleteEddmappingDetails to Save/Update Edd KycEddMapEntity");
	}
	/**
	 * This method is used to get Business Revenue from The CDD Customer Table.
	 * @param countrolNbr
	 * @param countryCode
	 * @param customerNbr
	 * @return
	 */
	public BigDecimal getBusinessRevnue(String countrolNbr,String countryCode,String customerNbr){
		BigDecimal businessRevenue= new BigDecimal(0);
		SQLQuery query = (SQLQuery) getSession().createSQLQuery("SELECT BUSINESS_REVENUE FROM KYC_CUSTOMER_DETAILS WHERE CONTROL_NBR=:controlNbr AND CNTRY_CDE=:countryCode AND CUSTOMER_NBR=:customerNbr")
									 .setParameter("controlNbr",countrolNbr).setParameter("countryCode",countryCode).setParameter("customerNbr",customerNbr);
		List<BigDecimal> businessList =query.list();
		if(null != businessList && !businessList.isEmpty()){
			businessRevenue =businessList.get(0);
		}
		return businessRevenue;
	}
	}
